[ { "title": "Físicas de The Legend of Zelda - Breath of the Wild", "url": "/documentacion/posts/fisicas-de-botw/", "categories": "Fisica", "tags": "fisica, analisis, videojuegos", "date": "2022-12-21 05:00:00 +0100", "snippet": "Autores Marta Jover Valero Mario Dorado MartínezIntroducciónHemos decidido analizar el videojuego The Legend of Zelda: Breath of the Wild, ya que uno de sus grandes logros, es haber creado un sis...", "content": "Autores Marta Jover Valero Mario Dorado MartínezIntroducciónHemos decidido analizar el videojuego The Legend of Zelda: Breath of the Wild, ya que uno de sus grandes logros, es haber creado un sistema de físicas bastante elaborado que interactúa entre sí.Este sistema contempla que los metales son conductores, por tanto, si utilizas elementos metálicos como espadas, escudos, etc., puedes crear una suerte de cables para así resolver puzzles.Ejemplo de como un jugador resuelve un puzzle de forma alternativa utilizando armas y armaduras como elementos para conducir la electricidadTambién, los objetos tienes propiedades físicas básicas. Por ejemplo, si están en una tabla y esa tabla es empujada por un objeto pesado, los objetos salen despedidos.BotW physics in a nutshell #BreathoftheWild #NintendoSwitch pic.twitter.com/o341FlzcpI&mdash; Pinwheel Popper (@PinwheelPopper) August 15, 2019Otro ejemplo que nos hemos encontrado mientras grabábamos el material necesario para el análisis, es que si disparas una flecha contra piedra, la flecha queda suelta en el suelo. Las ráfagas de viento las hacen rodar, y si es disparada contra una superficie en la que hay tierra o césped, la flecha queda clavada evitando el movimiento.En el juego puedes encontrar diferentes minijuegos, uno de ellos inspirado en los bolos. En este podemos ver las físicas de la bola de nieve cayendo por el acantilado. Va cogiendo velocidad poco a poco hasta derribar las columnas de madera a partir de la fuerza que ha tomado en la caída. Este minijuego es muy curioso porque según en que punto tires la bola de nieve, no tiene la fuerza suficiente para derribarlos todos, así que lo hemos considerado un punto muy positivo para elegir Breath of the Wild como nuestro ejemplo para el proyecto.Como hemos tomado medidasPara tomar las medidas para realizar los cálculos, henos cogido como referencia un elemento del cual sabemos el tamaño, en este caso, tomamos la estatura del protagonista del juego; Link, la cual es de 1.70 metros.Gracias a este dato y a las capturas que hemos ido tomando dentro del juego, hemos ido colocando al personaje repetidas veces sobre las superficies que queríamos medir utilizando el programa Photoshop.De esta forma hemos obtenido unas distancias aproximadas. Y de forma colateral, hemos creado una nueva unidad para medir longitudes, el Link\\[1 Link = 1.70 metros\\]Para los tiempos, hemos grabado videos realizando las acciones a analizar y posteriormente, utilizando programas de edición de vídeo, colocado temporizadores los cuales nos sirven para ver de forma bastante precisa cuanto tiempo transcurre durante, por ejemplo, un disparo con arco.Caída librePrimero de todo, hemos analizado una caída libre lanzando al personaje de Link desde una torre, así podremos saber la gravedad que hay dentro del videojuego y ver si es un valor realista.Comparativa de tamaño entre Link y la torreAl ser una caída libre, hemos utilizado la fórmula del MRUA, ya que es un movimiento acelerado por la gravedad.Tiempo en el juego\\[X(t) = X_{0} + v_{0}t + \\frac{1}{2} \\cdot at^{2}\\]\\[0 = 78.2 + 0 + \\frac{1}{2} \\cdot 2.152 \\cdot a^{2}\\]\\[a^{2} = \\frac{-78.2 - \\frac{1}{2}}{2.152} = -33.83\\]Haciendo los cálculos, podemos observar que la fuerza de la gravedad es de unos -33.83 m/s2 o -19.9 links/s2, lo cual es un valor muy superior al de la tierra (9.8 m/s2), esto significa que, en el mundo de The Legend of Zelda: Breath of the Wild, hay más gravedad que en Júpiter (24.79 m/s2).Tiempo en la vida realHaciendo los cálculos con la gravedad que tenemos en el planeta tierra, podemos obtener el tiempo que tardaría Link en caer desde lo alto de la torre hasta el suelo y ver la diferencia con los tiempos que hemos medido dentro del juego.Utilizamos la fórmula del MRUA:\\[X(t) = X_{0} + v_{0}t + \\frac{1}{2} \\cdot at^{2}\\]\\[0 = 78.2 + 0 + \\frac{1}{2} \\cdot t \\cdot 9.81^{2}\\]Haciendo los cálculos, obtenemos que una caída de la misma altura con unos valores de gravedad realistas (9.81 m/s2), la caída duraría unos 3.99 segundos, lo cual queda en una diferencia de tiempo de 1.90 segundos.Tiro parabólicoPara analizar que factores físicos tiene en cuenta el videojuego a la hora de realizar un tiro parabólico, hemos disparado una flecha con un arco.Para calcular el tiro parabólico, necesitamos saber el ángulo en el cual sale disparada la flecha, cuanto tiempo tarda en impactar contra el suelo y a cuanta distancia impacta.Para obtener el ángulo con el que sale la flecha, hemos cogido la imagen dónde se ve la trayectoria de la flecha con su respectiva parábola y dibujamos un triángulo aproximado para sacar sus ejes y calcular las distancias a partir de los píxeles de largo y alto que ocupan.Una vez colocados los ejes, cogemos la longitud del eje X y del eje Y, buscamos la tangente:\\[\\tan (\\alpha )=\\frac{sin(\\alpha )}{cos(\\alpha )}\\]Y a partir del resultado, buscamos el arcotangente.\\[\\alpha =\\arctan (tan(\\alpha ))\\]De esta forma, sacamos de forma aproximada el ángulo de la parábola.Para saber cuanto tiempo tarda en impactar contra el suelo, hemos disparado la flecha y cronometrado cuanto tiempo tarda en caer al suelo.Para medir la distancia que ha recorrido la flecha, hemos hecho una captura colocando el personaje desde la posición que se ha disparado la flecha, y otra dónde ha impactado la flecha, y utilizando al personaje como forma de medida, hemos sacado la distancia.Parábola que realiza la flecha al ser disparadaAl final, con todos estos valores obtenemos que la flecha es disparada con unos 14.3 grados de inclinación y recorre 64.6 metros en 1 segundo.A continuación, vamos a descomponer el vector velocidad en dos componentes: velocidad horizontal y velocidad vertical.Para calcular la velocidad horizontal, tenemos que dividir la distancia que recorre la flecha entre el tiempo que tarda en recorrerla. Esto es así, ya que asumimos que es una velocidad constante, ya que al ser una flecha, la fricción con el aire es mínima.\\[\\frac{64.6}{1} = 64.6\\]Esto nos da como resultado que la flecha tiene una velocidad horizontal de 64.6 m/s o 38 links/s.\\[V_x = \\left | V \\right |\\cdot \\cos\\alpha\\]\\[V_y = \\left | V \\right |\\cdot \\sin\\alpha\\]Substituimos el módulo por la velocidad horizontal.\\[V_y = (\\frac{V_x}{\\cos\\alpha}) \\cdot \\sin\\alpha\\]Relación trigonométrica sin α / cos α = tan α\\[V_y = V_x \\cdot \\frac{\\sin\\alpha}{\\cos\\alpha}\\]\\[V_y = V_x \\cdot \\tan\\alpha\\]\\[V_y = 64.6 \\cdot \\tan 14.3^{\\circ} = 16.47m/s\\]Esto nos da que la velocidad vertical es igual a 16.47 m/s o 9.69 links/s.Para calcular la gravedad, hemos utilizado la fórmula del MRUA, con la componente de velocidad vertical, ya que esta velocidad está influenciada por la aceleración que ejerce la gravedad, sin embargo, la horizontal no.MRUA:\\[X(t) = X_{0} + v_{0}t + \\frac{1}{2} \\cdot at^{2}\\]\\[0 = 0.85 + 16.47 \\cdot 1 + \\frac{1}{2} \\cdot a \\cdot 1^{2}\\]\\[a = \\frac{(-0.85) - (-16.47) \\cdot 1}{1^{2} \\cdot \\frac{1}{2}} = 32.09 m/s^{2}\\] *0.85 m = 0.5 links (altura inicial desde la que se lanza la flecha).Obtenemos que, la fuerza de la gravedad es igual a: -32.09 m/s2 o -18.88 links/s2, que es un valor bastante similar al que hemos calculado previamente en la caída libre. Podemos asumir que el juego tiene un único valor para la gravedad, y que la diferencia entre los valores es debida a errores de medida.CatapultaUtilizando varios elementos que encontramos sueltos por el mundo de Breath of the Wild, podemos crear fácilmente una suerte de catapulta. Hemos querido ver cómo de fidedignas son las físicas comparándolas con la vida real.Materiales para utilizados para crear la catapultaImagen de la catapulta desde cercaPerspectiva del jugador antes de soltar la piedraPrimero, necesitamos saber la velocidad a la que sale despedido Link, teniendo en cuenta los valores de la gravedad, el tiempo que tarda en caer y la posición inicial.Video con medidasVideo con temporizadorPara conseguir la velocidad inicial que adquiere Link al ser lanzado, vamos a utilizar la fórmula del MRUA:\\[X(t) = X_{0} + v_{0}t + \\frac{1}{2} \\cdot at^{2}\\]\\[0 = 2.55 + v_{0} \\cdot 2.44 + \\frac{1}{2} \\cdot (-33.34) \\cdot 2.44^{2}\\]\\[V_{0} = 93.32 m/s\\]Obtenemos que Link sale despedido a una velocidad de 93.32 m/s o 54,89 links/s.El siguiente paso sería ver a cuanta fuerza es sometido Link durante el lanzamiento. Para esto necesitamos saber la masa de nuestro protagonista. Como no tenemos ninguna forma de medir cuanto pesa, hemos consultado en internet cuál es el peso promedio para un adulto varón de 1.70 metros de altura y asumimos que ese es el peso del personaje, el cual es de unos 65 kg.Lo siguiente es medir cuanto tiempo tarda Link en salir despedido desde que la piedra impacta contra la tabla, es decir, el tiempo que Link está acelerando. Utilizando el vídeo anterior, vemos qué link se despega de la tabla 85 milésimas después de que la piedra impacte.Dividiendo la velocidad inicial entre el tiempo que tarda Link en despegar, podemos calcular cuál es la aceleración.\\[\\frac{93.32}{0.085} = 1097.88 m/s^{2}\\]Lo cual nos da que Link acelera a una velocidad de, 1097.88 m/s2 o 645,81 links/s2.Sabiendo la aceleración, podemos multiplicarla por la masa y así obtener la fuerza que recibe el personaje.\\[1097.88 \\cdot 65 = 71.82kN\\]Según la web Petzl España: Este valor procede de estudios militares sobre paracaidistas: el cuerpo humano de un deportista podría soportar una deceleración máxima de unos 15 G, es decir, 12 kN para una masa de 80 kg.Teniendo en cuenta que la piedra no da toda la energía justo cuando choca con la plataforma, sino que es entregada “linealmente” hasta que la tabla toca el suelo, no podemos saber la masa exacta de la piedra, pero podemos determinar la masa mínima. Esto lo podemos saber igualando la energía potencial de la piedra con la energía cinética de Link. Al hacer esto, sacaríamos la masa de la piedra si disipara toda su energía al contactar con la plataforma y no al contactar con el suelo.Sabiendo la velocidad inicial, podemos calcular la energía cinética de Link.\\[\\frac{1}{2} \\cdot mv^{2}\\]\\[\\frac{1}{2} \\cdot 65 \\cdot 93.32^{2} = 283.03kJ\\]Para la altura hemos cogido la altura total, porque, si pusiéramos la altura total menos la altura de la plataforma, estaríamos diciendo que toda la energía se transfiere cuando la piedra toca la plataforma, pero, eso no es verdad. Así que asumimos que la energía es transferida de forma uniforme mientras la piedra empuja la plataforma y que transfiere toda la energía cuando toca el suelo.Teniendo en cuenta esto, podemos decir que esto es una aproximación asumiendo que toda la energía de la piedra fuera transferida a Link, lo cual es mentira, porque en el vídeo se aprecia que la piedra aún tiene energía al contactar con suelo. Así que estos cálculos serían una cota inferior.\\[Ep = m \\cdot g \\cdot h\\]\\[m \\cdot \\left | -33.34 \\right | \\cdot 17.85 = 283.03kJ\\]\\[m = \\frac{283030}{\\left | -33.34 \\right | \\cdot 17.85} = 475.59kg\\]Podemos ver que, 475.59 kg es la masa mínima que tendría que tener la piedra para disparar a Link a esa velocidad.Para comprobar si en el juego, se conservan las energías, hemos mirado la energía potencial en el punto máximo de altura y la hemos comparado con la energía cinética que tiene Link al ser lanzado.\\[Ep = m \\cdot g \\cdot h\\]\\[Ep = 65 \\cdot \\left | -33.34 \\right | \\cdot 21.7 - 2.55 = 47.02kJ\\]\\[283.03 - 47.02 = 236.01kJ\\]Haciendo estos cálculos, podemos observar que hay una pérdida de energía de 236.01 kJ, lo cual no es realista, ya que la energía es una magnitud conservativa. No sabemos cual puede ser el factor por el cuál perdemos tanta energía, ya que la fricción con el aire no debería disiparla tanto.Habiendo analizado todos estos parámetros, podemos decir que las físicas del videojuego son bastante dispares con las físicas reales.Salto de LinkTeníamos curiosidad sobre si el juego tenía en cuenta el peso de Link a la hora de calcular las físicas dentro del juego. Para comprobar esto, hemos capturado dos vídeos del personaje saltando con una armadura y sus armas equipadas, lo cual aumentaría la masa que tiene que elevar Link a la hora de saltar, y otro salto sin nada. En teoría, Link debería saltar más sin tener nada equipado.Medidas del salto de Link con armaduraMRUA:\\[X(t) = X_{0} + v_{0}t + \\frac{1}{2} \\cdot at^{2}\\]\\[0 = 0 + v_{0} \\cdot 0.27 + \\frac{1}{2} \\cdot (-33.34) \\cdot 0.27^{2}\\]\\[v_{0} = 0.95m/s\\]Link, al saltar, tiene una velocidad inicial de 0.95 m/s o 0.56 links/s.No podemos calcular la fuerza con la que salta Link, ya que la animación es instantánea, no podemos medir cuanto tiempo Link está acelerando.Medidas del salto de Link sin armaduraPodemos observar que el videojuego no tiene en cuenta la masa de Link, ya que salta la misma altura cuando tiene equipada una armadura y sus armas que cuando no las tiene equipadas.Webgrafía¿Cómo se ha determinado la fuerza de choque máxima de 12kN? - Petzl España. (s. f.). https://www.petzl.com/ES/es/Sport/%C2%BFComo-se-ha-determinado-la-fuerza-de-choque-maxima-de-12kN-?ProductName=MAMBO-10-1-mmPinwheel Popper on. (2019, 15 agosto). Twitter. https://twitter.com/PinwheelPopper/status/1162063176520704001?s=20Metal weapons Conduct electricity. (s. f.). Imgur. Recuperado 23 de diciembre de 2022, de https://imgur.com/miBXgFCBreath of the Wild - Pondo Snowball Bowling Easy Setup for Strikes. (2017, 31 marzo). YouTube. Recuperado 23 de diciembre de 2022, de https://www.youtube.com/watch?v=D3FdJk9vwDA&amp;feature=youtu.beLic. Marcela Licata - zonadiet.com. (s. f.). Tabla de Peso Ideal en metros y kilogramos. Zonadiet. https://www.zonadiet.com/tablas/pesoideal.cgiCemu Emulator. (s. f.). https://cemu.infoGitHub - etra0/botw-freecam: Freecam for the game Zelda: Breath of the Wild for the Wii U using the Cemu emulator. (s. f.). GitHub. https://github.com/etra0/botw-freecamWiki Targeted (Entertainment). (s. f.). The Legend of Zelda Wiki. https://zelda.fandom.com/es/wiki/Linkcolaboradores de Wikipedia. (2022b, diciembre 23). Júpiter (planeta). Wikipedia, la enciclopedia libre. https://es.wikipedia.org/wiki/J%C3%BApiter_(planeta)" }, { "title": "C Spredsheet", "url": "/documentacion/posts/c-spredsheet/", "categories": "C, spredsheet", "tags": "c, spredsheet, tutorial", "date": "2022-09-22 08:05:00 +0200", "snippet": "C SpreadsheetHello World#include &lt;stdio.h&gt;int main() { printf(\"Hello World!\");}Comments// this is a commentData type// type varName = value;int var = 1;float;double;char;Constantsconst int...", "content": "C SpreadsheetHello World#include &lt;stdio.h&gt;int main() { printf(\"Hello World!\");}Comments// this is a commentData type// type varName = value;int var = 1;float;double;char;Constantsconst int var = 1;C Operators Operator Example Same as     = x = 5 x = 5     += x += 3 x = x + 3     -= x -= 3 x = x - 3     *= x *= 3 x = x * 3     /= x /= 3 x = x / 3     %= x %= 3 x = x % 3     &amp;= x &amp;= 3 x = x &amp; 3       = x |= 3 x = x 3 ^= x ^= 3 x = x ^ 3     &gt;&gt;= x »= 3 x = x » 3     «= x «= 3 x = x « 3     if elseConditions Less than: a &lt; b Less than or equal to: a &lt;= b Greater than: a &gt; b Greater than or equal to: a &gt;= b Equal to a == b Not Equal to: a != b Conditionals Use if to specify a block of code to be executed, if a specified condition is true Use else to specify a block of code to be executed, if the same condition is false Use else if to specify a new condition to test, if the first condition is false Use switch to specify many alternative blocks of code to be executed if (x &gt; y) { // code block}if (x &gt; y) { // code that will be executed if the condition = true} else { // code that will be executed if the condition != true}if (x &gt; y) { // code that will be executed if the condition = true} else if (y &gt; z) { // code that will be executed if the first condition != false and second condition == true}Switchswitch(expression) { case x: // code block break; case y: // code block break; default: // remaining code block}While LoopWhilewhile (condition) { // code block}Do/Whiledo { // code block} while(condition)For Loopfor (i = 0; i &lt; x; i++) { // code block}ArraysCreate a defined Array// type varName[] = {x, y, z};int var[] = {1, 2, 3};printf(var[o]);// output: 1Set Array sizeint var[4];var[0] = 1;var[1] = 2;var[2] = 3;var[3] = 4;Strings En C no hay un tipo de variable String, solo puedes usar char y crear un array de caracteres para hacer una StringEsto quiere decir que podemos manipular una \"String\" como si fuera un Arraychar greetings[] = \"Hello World!\";greetings[0] = 'J';printf(\"%s\", greetings);// Outputs Jello World! instead of Hello World!Puedes declarar el char como un Array o de forma normal, a efectos prácticos es lo mismo:char greetings[] = {'H', 'e', 'l', 'l', 'o', ' ', 'W', 'o', 'r', 'l', 'd', '!', '\\0'};char greetings2[] = \"Hello World!\";printf(\"%lu\\n\", sizeof(greetings)); // Outputs 13printf(\"%lu\\n\", sizeof(greetings2)); // Outputs 13user Input#include &lt;stdio.h&gt;int main() {\t// Create an integer variable that will store the number we get from the user\tint myNum;\t// Ask the user to type a number\tprintf(\"Type a number: \\n\");\t// Get and save the number the user types\tscanf_s(\"%d\", &amp;myNum);\t// Output the number the user typed\tprintf(\"Your number is: %d\", myNum);} Hay que poner scanf_s, no scanf, ya que C considera que scanf ya no es seguro y te obliga a usar la versión segura. XD.Memory AddressCuando creas una variable en C, se le asigna una dirección de memoria.La dirección de memoria es la localización donde la variable se almacena en el ordenador.Cuando asignamos un valor a la variable, es almacenado en esa dirección de memoria.Para acceder a el, tenemos que usar el operador de referéncia &amp;, y el resultado mostrará dónde está almacenada esa variable.int var = 43;printf(\"%p\", &amp;var); La dirección de memoria está en hexadecimal desde (0x...). Probablemente no saldrá el mismo resultado en tu mismo programa &amp;var es lo que se conoce como un \"pointer\". Un pointer basicamente, almacena la dirección de memoria de la variable como su valor. Para mostrar el valor del pointer, usamos el especificador %pCrear PointersAhora sabemos que, podemos conseguir la dirección de memoria de una variable con el operador &amp;:int myAge = 43; // an int variableprintf(\"%d\", myAge); // Outputs the value of myAge (43)printf(\"%p\", &amp;myAge); // Outputs the memory address of myAge (0x7ffe5367e044)Funciones// Create a functionvoid myFunction() { printf(\"I just got executed!\");}int main() { myFunction(); // call the function return 0;}// Outputs \"I just got executed!\"Parámetros de Funcionesvoid myFunction(char name[]) { printf(\"Hello %s\\n\", name);}int main() { myFunction(\"Liam\"); myFunction(\"Jenny\"); myFunction(\"Anja\"); return 0;}// Hello Liam// Hello Jenny// Hello AnjaRecursividad El concepto de recursividad se refiere a una función que se llama a ella misma.#include &lt;stdio.h&gt;int main() { int result = sum(10); // llamas a la función printf(\"%d\", result); return 0;}int sum(int k) { if (k &gt; 0) { return k + sum(k - 1); // vuelves a llamar a la función } else { return 0; }}// output 55C Math Functions Para utilizar las funciones de math, tenemos que incluir en el header del archivo, la línea de math.h#include &lt;math.h&gt;Square Rootprintf(\"%f\", sqrt(16));// output 4.000000Round a NumberLa función ceil() redondea un número hacia arriba a su entero más cercano, y el método floor() redondea un número hacia abajo a su entero más cercano y devuelve el resultado:printf(\"%f\", ceil(1.4));printf(\"%f\", floor(1.4));// output 2.000000// output 1.000000Powerprintf(\"%f\", pow(4, 3));// output 64.000000Otros Funtion Description abs(x) Returns the absolute value of x acos(x) Returns the arccosine of x asin(x) Returns the arcsine of x atan(x) Returns the arctangent of x cbrt(x) Returns the cube root of x cos(x) Returns the cosine of x exp(x) Returns the value of Ex sin(x) Returns the sine of x (x is in radians) tan(x) Returns the tangent of an angle C Estructuras (structs)Estructuras (también llamado structs) son un grupo de variables relacionadas en un solo sitio. Cada variable en la estructura se denomina miembro de la estructura.A diferéncia de las array, una estructura puede contener diferentes tipos de datos (int, float, char, etc…).Crear una Estructurastruct MyStructure { // Structure declaration int myNum; // Member (int variable) char myLetter; // Member (char variable)}; // End the structure with a semicolonAcceder a una Estructurastruct myStructure { int myNum; char myLetter;};int main() { struct myStructure s1; return 0;} TODO" }, { "title": "Funciones", "url": "/documentacion/posts/matematicas-funciones/", "categories": "Matemáticas, Funciones", "tags": "matemáticas, funciones, teoría", "date": "2022-09-21 06:00:00 +0200", "snippet": "Qué es una función?Una función es una relación entre un conjunto de entradas y conjunto de posibles salidas donde cada entrada está relacionada exactamente con una salida. una línea vertical solo ...", "content": "Qué es una función?Una función es una relación entre un conjunto de entradas y conjunto de posibles salidas donde cada entrada está relacionada exactamente con una salida. una línea vertical solo puede intersectar la función en un punto en un momento dadoés una función si una recta vertical se corta en dos o más puntos NO es una funciónNO és una funciónDominio y RangoIlustración que muestra f, una función con dominio X y codominio Y. El óvalo pequeño dentro de Y es la imagen de f, a veces llamado rango de f.DominioEl dominio son los posibles valores de X que pueden ser insertados en la función\\[todos-los-números-reales \\to f(x) = 2x + 1 \\to todos-los-números-reales\\]RangoEl rango son los valores que la función puede tener\\[todos-los-números-reales \\to f(x) = \\left| x \\right| \\to [0, \\infty]\\]Ceros en una funciónLos ceros en una función son las intersecciones de X en el gráfico de esa función. (y = 0)Diferentes tipos de funciones darán lugar a diferentes numero de ceros en esa función.Evaluar una funciónSimplemente tenemos que insertar el valor que queramos evaluar a la funciónPor ejemplo tenemos esta función:\\[f(x) = 3x^2 - 5x + 2\\]Pues para evaluar el 2 en esa función tenemos que substituir la x por 2:\\[f(2) = 3(2)^2 - 5(2) + 2\\] También podemos substituir la X por expresiones algebraicas\\[f(x) = 2x + 1\\]\\[f(x + 3) = 2(x + 3) + 1 = \\textbf{2x + 7}\\]Manipular funciones" }, { "title": "Metodología sobre el testeo de software", "url": "/documentacion/posts/metodologia-testing/", "categories": "Testing", "tags": "testing", "date": "2022-07-13 09:47:00 +0200", "snippet": "Metodología sobre el testeo de softwareLas metodologías de testeo de software son estrategias o acercamientos utilizados para probar que una aplicación se ve y funciona como debería. Este documento...", "content": "Metodología sobre el testeo de softwareLas metodologías de testeo de software son estrategias o acercamientos utilizados para probar que una aplicación se ve y funciona como debería. Este documento es mi proceso para realizar estos procesos de prueba, tanto en Backend como en Frontend.Primero de todo, hay que hacer una distinción entre los tipos de pruebas:Pruebas Funcionales vs No-FuncionalesLa principal razón de utilizar varias metodologías de pruebas, es para asegurar que el software en cuestión puede operar en multiples entornos y sobre varias plataformas.Se puede hacer una división entre dos tipos de pruebas, funcionales y no funcionales:Pruebas FuncionalesEstas metodologías implican probar la aplicación frente a los requisitos comerciales.Incorpora todo tipos de pruebas diseñadas para garantizar que cada parte del software funciona como debe, esto lo hacemos utilizando casos de uso, proporcionados por el equipo de diseño o analista de negocios.Estas Pruebas normalmente se llevan a cabo en orden e incluyen: Prueba unitaria (Unit Testing) Pruebas de integración Pruebas del sistema Test de aceptación Pruebas No FuncionalesLas pruebas no funcionales incorporan todo tipos de exámenes enfocados en el aspecto operacional de una pieza de software. Esto incluye: Prueba de rendimiento Prueba de seguridad Prueba de usabilidad Prueba de compatibilidad La clave para que tu software tenga una calidad alta y sea fácil de adoptar por el usuario final, es crear un marco de pruebas robusto que implemente ambas metodologías, funcional y no funcional.Prueba UnitariaLas pruebas unitarias (o Unit Testing) son el primer nivel de testeo y normalmente lo llevan a cabo los mismo desarrolladores. Es el proceso que asegura individualmente que cada pieza del software funciona a nivel de código.Los desarrolladores en un entorno de desarrollo basado en pruebas, generalmente escribirán y ejecutarán las pruebas antes de que el software o la función se pase al equipo de prueba.Las pruebas unitarias se pueden realizar manualmente, pero la automatización del proceso acelerará los ciclos de entrega y ampliará la cobertura (coverage) de los tests.También hará que debugar sea mas sencillo, porque encontrar el error antes implica que se tarda menos tiempo en arreglarlo que si el error fuera descubierto después en el proceso de testeo.Pruebas de IntegraciónDespués de que cada unidad sea probada minuciosamente, es momento de integrarla con otras unidades para crear módulos o componentes que son diseñados para realizar una tarea o actividad específica.Son probados como grupo a través de pruebas de integración para garantizar que los segmentos completos de una aplicación se comporten como esperas (esto quiere decir, que las interacciones entre unidades son perfectas).Estas pruebas a menudo se enmarcan en escenarios de usuario, como iniciar una sesión en una aplicación o abrir archivos.Estas pruebas las pueden realizar los desarrolladores o evaluadores independientes y generalmente se componen de una combinación de pruebas manuales y funcionales automatizadas.Pruebas de SistemaLas pruebas de sistema son pruebas de caja negra (Black Box) que se utiliza para evaluar el sistema completo e integrado, como un todo, para garantizar que cumpla los requisitos especificados.La funcionalidad del software se prueba de principio a fin y, por lo general, la lleva a cabo un equipo de pruebas independiente del equipo de desarrollo.Pruebas de AceptaciónEsta es la ultima fase de las pruebas funcionales y se utiliza para evaluar si la pieza final de software está lista para entregar o no.Implica garantizar que el producto cumpla con todos los criterios comerciales originales y que satisfaga las necesidades del usuario final.Esto requiere que el producto se pruebe tanto interna, como externamente, lo que significa que deberá ponerse en manos de sus usuarios finales para realizar beta testing junto con el equipo de control de calidad. La prueba beta es clave para obtener comentarios reales de los clientes potenciales y puede abordar cualquier inquietud final sobre la usabilidad.Pruebas de rendimientoLas pruebas de rendimiento son pruebas no funcionales que determinan como una aplicación rendirá bajo ciertas condiciones. El objetivo es probar la sensibilidad y estabilidad en una situación de usuario real.Los test de rendimiento pueden ser divididos en 4 tipos: Prueba de carga (Load Testing): es el proceso de poner cantidades incrementales de demanda simulada en el software, para verificar que puede asumir la carga para lo que está diseñado o no. Prueba de estrés (Stress Testing): es coger la prueba de carga y llevarla un paso mas allá. Se usa para medir cómo responderá el software en su carga máxima o mas allá. El objetivo es sobrecargar la aplicación a propósito hasta que llegue a punto crítico y rompa. Esto se hace tanto en escenarios realistas, como poco realistas. Prueba de resistencia (Endurance Testing / Soak Testing): Se utiliza para analizar el comportamiento del software bajo una carga simulada determinada en un periodo prolongado en el tiempo. El objetivo es entender como tu sistema se comportará bajo un uso prolongado, haciendo así esta prueba un proceso mas largo que las pruebas de estrés o carga (las cuales están diseñadas para acabar en unas pocas horas). Una parte crucial de las pruebas de resistencia es que ayuda a descubrir fugas de memoria. Prueba de picos (Spike Testing): es un tipo de test de carga que se usa para determinar como el software responderá a una ráfaga sustancialmente mas grande de actividad simultánea de usuarios o del sistema durante períodos de tiempo variables. Idealmente esto ayudará a comprender qué sucederá cuando la carga aumente de forma repentina y drástica. Pruebas de seguridadSon un tipo de pruebas no funcionales las cuales determinan si la información y datos del sistema están protegidos. El objetivo es encontrar de forma deliberada lagunas y riesgos de seguridad en el sistema que podrían resultar en el acceso no autorizado o la pérdida de información mediante el sondeo de la aplicación en busca de debilidades.Existen varios tipos de pruebas de seguridad, cada uno de los cuales tiene como objetivo verificar seis principios básicos de seguridad: Integridad Confidencialidad Autentificación Autorización Disponibilidad No repudio Pruebas de UsabilidadEstas pruebas miden la facilidad de uso de una aplicación desde la perspectiva del usuario final y, a menudo, se realizan durante las etapas de prueba del sistema o de aceptación.El objetivo es determinar si el diseño visible y la estética de una aplicación cumplen o no con el flujo de trabajo previsto para varios procesos, como iniciar sesión en una aplicación. Las pruebas de usabilidad son una forma excelente para que los equipos revisen funciones separadas o el sistema en su conjunto, para ver si es intuitivo de usar.Pruebas de CompatibilidadLas pruebas de compatibilidad se utilizan para evaluar cómo funcionará una aplicación o bloque del software en diferentes entornos. Se utiliza para verificar que el producto sea compatible con múltiples sistemas operativos, plataformas, navegadores o configuraciones de resolución.El objetivo es garantizar que la funcionalidad del software sea compatible de manera constante en cualquier entorno que espera que sea utilizado por los usuarios finales.Herramientas de pruebasOwasp ZapBurp suitePostmanSeleniumJMeterTestCompleteTestLinkWebgrafía How They Test SmartBear " }, { "title": "Principios de diseño: Onboarding", "url": "/documentacion/posts/principios-de-dise%C3%B1o-onboarding/", "categories": "Principles of design, onboarding", "tags": "design, onboarding, android", "date": "2022-06-27 05:00:00 +0200", "snippet": "OnboardingEl Onboarding es una unboxing virtual que ayuda a los usuarios a comenzar con una aplicación.Como usarloEl Onboarding tiene que tener un objetivo específico enfocado a nivel de familiariz...", "content": "OnboardingEl Onboarding es una unboxing virtual que ayuda a los usuarios a comenzar con una aplicación.Como usarloEl Onboarding tiene que tener un objetivo específico enfocado a nivel de familiarizar al usuario con la aplicación. Contexto del usuario Objetivos del Onboarding El usuario ya ha instalado la app y no necesita ver mas marketing Saludar al usuario y emocionar al usuario sobre la experiencia que le espera El usuario está ansioso por probar la aplicación sin leer un manual de instrucciones Ayudar al usuario a comprender implícita o explícitamente cómo se puede usar la aplicación en sus vidas El usuario aún no está familiarizado con la UI de la app o no está listo para aprender sobre ella Impulsa al usuario a realizar acciones que aumenten el compromiso y la retención en los primeros siete días El Onboarding es un punto en un viaje más largo que comienza en la app store y termina cuando el usuario realiza la primera acción relacionada con la retención clave en su aplicación.Al diseñar su incorporación, hay que tener en cuenta el orden de las pantallas.Muestre el Onboarding a los usuarios nuevos. No se lo muestres NUNCA a los usuarios que regresan.Buenas PrácticasConsistencia visualMantener una continuidad visual tanto en los caracteres, el entorno, el estilo, tipografía, colores, botones, etc.SimplificarSimplificar la pantalla visualmente lo máximo posible para que si es posible, de un solo vistazo el usuario pueda entender lo que queremos contar.No mostrar la UI literalmenteMostrar la UI de la aplicación al usuario si no la ha visto previamente es una mala idea. Primero hay que mostrarle los beneficios.Puedes mostrar una pantalla educacional mas específica en un contexto mejor.Ejemplos:Webgrafía Material Design Android Developers " }, { "title": "RecyclerView", "url": "/documentacion/posts/recyclerview/", "categories": "Android, recyclerview", "tags": "android, recyclerview", "date": "2022-06-08 10:23:00 +0200", "snippet": "RecyclerViewRecyclerView es un widget para mostrar una lista de elementos.Desarrollaremos una app que muestra una lista de elementos genéricos, y que permite añadir, ver o eliminar un elemento.http...", "content": "RecyclerViewRecyclerView es un widget para mostrar una lista de elementos.Desarrollaremos una app que muestra una lista de elementos genéricos, y que permite añadir, ver o eliminar un elemento.https://github.com/gerardfp/recyclerviewCrea el proyectoClona (o descarga) este repositorio: https://github.com/gerardfp/recyclerview_templateEn esta plantilla de proyecto se ha implementado la base de la arquitectura MVVM: Se ha configurado la navegación con las siguientes Views: MostrarElementoFragment: Muestra el detalle de un Elemento NuevoElementoFragment: Permite introducir los datos y añadir un nuevo Elemento a la lista RecyclerElementosFragment: Muestra la lista de todos los Elementos. También tiene un FloatingActionButton, que permite navegar hacia el NuevoElementoFragment. Se ha añadido un Model para almacenar los Elementos: La clase Elemento simplemente es para contener los datos de un Elemento. Elemento.java public class Elemento { String nombre; String descripcion; float valoracion; public Elemento(String nombre, String descripcion) { this.nombre = nombre; this.descripcion = descripcion; }} La clase ElementosRepositorio mantiene los Elementos en un ArrayList: En el constructor se añaden algunos Elementos de ejemplo. Tiene dos métodos para insertar() o eliminar() un Elemento, que retornan en un callback, el ArrayList de Elementos resultante. También tiene un método para actualizar la valoración de un Elemento. ElementosRepositorio.java import java.util.ArrayList;import java.util.List;public class ElementosRepositorio { List &lt; Elemento &gt; elementos = new ArrayList &lt; &gt; (); interface Callback { void cuandoFinalice(List &lt; Elemento &gt; elementos); } ElementosRepositorio() { elementos.add(new Elemento(\"Elemento químico\", \"Es un átomo con moléculas, aquella sustancia que no puede ser descompuesta mediante una reacción química, en otras más simples. Pueden existir dos átomos de un mismo elemento con características distintas y, en el caso de que estos posean número másico distinto, pertenecen al mismo elemento pero en lo que se conoce como uno de sus isótopos.\")); elementos.add(new Elemento(\"Elemento de un conjunto\", \"En teoría de conjuntos, un elemento o miembro de un conjunto (o familia de conjuntos) es un objeto que forma parte de ese conjunto (o familia).\")); elementos.add(new Elemento(\"Elemento sintético\", \"En química, un elemento sintético es un elemento químico que no aparece de forma natural en la Tierra, y solo puede ser creado artificialmente.\")); elementos.add(new Elemento(\"Elemento algebraico\", \"En matemáticas, más concretamente en álgebra abstracta y teoría de cuerpos, se dice que un elemento es algebraico sobre un cuerpo si es raíz de algún polinomio con coeficientes en dicho cuerpo. Los elementos algebraicos sobre el cuerpo de los números racionales reciben el nombre de números algebraicos.\")); elementos.add(new Elemento(\"Elementos de la naturaleza\", \"Los cuatro o cinco elementos de la naturaleza —normalmente agua, tierra, fuego y aire, a los que se añade la quintaesencia o éter— eran, para muchas doctrinas antiguas, los constituyentes básicos de la materia y explicaban el comportamiento de la naturaleza. El modelo estuvo vigente hasta que la ciencia moderna empezó a desentrañar los elementos y reacciones químicas.\")); elementos.add(new Elemento(\"Elemento constructivo\", \"Un elemento constructivo es cada uno de los componentes materiales que integran una obra de construcción. Se suelen clasificar en estructurales y compartimentadores.\")); } List &lt; Elemento &gt; obtener() { return elementos; } void insertar(Elemento elemento, Callback callback) { elementos.add(elemento); callback.cuandoFinalice(elementos); } void eliminar(Elemento elemento, Callback callback) { elementos.remove(elemento); callback.cuandoFinalice(elementos); } void actualizar(Elemento elemento, float valoracion, Callback callback) { elemento.valoracion = valoracion; callback.cuandoFinalice(elementos); }} Se ha creado un ViewModel que expone las acciones sobre el modelo (insertar y eliminar), guardando el array de Elementos en un MutableLiveData que pueda ser observado por las vistas. También expone la acción de actualizar la valoración. ElementosViewModel.java import android.app.Application;import androidx.annotation.NonNull;import androidx.lifecycle.AndroidViewModel;import androidx.lifecycle.MutableLiveData;import java.util.List;public class ElementosViewModel extends AndroidViewModel { ElementosRepositorio elementosRepositorio; MutableLiveData&lt;List&lt;Elemento&gt;&gt; listElementosMutableLiveData = new MutableLiveData&lt;&gt;(); public ElementosViewModel(@NonNull Application application) { super(application); elementosRepositorio = new ElementosRepositorio(); listElementosMutableLiveData.setValue(elementosRepositorio.obtener()); } MutableLiveData&lt;List&lt;Elemento&gt;&gt; obtener(){ return listElementosMutableLiveData; } void insertar(Elemento elemento){ elementosRepositorio.insertar(elemento, new ElementosRepositorio.Callback() { @Override public void cuandoFinalice(List&lt;Elemento&gt; elementos) { listElementosMutableLiveData.setValue(elementos); } }); } void eliminar(Elemento elemento){ elementosRepositorio.eliminar(elemento, new ElementosRepositorio.Callback() { @Override public void cuandoFinalice(List&lt;Elemento&gt; elementos) { listElementosMutableLiveData.setValue(elementos); } }); } void actualizar(Elemento elemento, float valoracion){ elementosRepositorio.actualizar(elemento, valoracion, new ElementosRepositorio.Callback() { @Override public void cuandoFinalice(List&lt;Elemento&gt; elementos) { listElementosMutableLiveData.setValue(elementos); } }); }} ViewModel compartidoLa novedad de esta arquitectura MVVM es que el ViewModel es compartido por los 3 fragments.Cuando se obtiene el ViewModel desde un Fragment, hay dos formas de hacerlo: Pasando this (=el propio Fragment) al constructor de ViewModelProvider. En tal caso se obtiene una instancia del ViewModel propia para el Fragment, a la que solo él tiene acceso. Pasando requireActivity() (=la Activity en la que esté el Fragment) al constructor de ViewModelProvider. Se obtiene una instancia del ViewModel propia de la Activity, que es compartida por todos los Fragments que se muestren en dicha Activity.Es decir, si desde los Fragment obtenemos el ElementosViewModel con this, así:ElementosViewModel elementosViewModel = new ViewModelProvider(this).get(ElementosViewModel.class);cada Fragment obtiene una instancia del ViewModel propia, a la que solo él tiene acceso:Si en cambio, desde los Fragments obtenemos el ElementosViewModel con requireActivity(), así:ElementosViewModel elementosViewModel = new ViewModelProvider(requireActivity()).get(ElementosViewModel.class);todos los Fragment que estén en la misma Activity obtienen la misma instancia del ViewModel, con la que pueden compartir datos ente sí:En esta app usamos el ViewModel compartido, ya que los 3 fragment van a compartir el mismo array de Elementos, y también permitirá compartir el dato del Elemento seleccionado entre la pantalla de la lista y la pantalla del detalle.RecyclerViewRecyclerView es un widget que permite mostrar y hacer scroll en una lista de elementos basados en grandes conjuntos de datos (o datos que cambian frecuentemente). Es una versión más avanzada y flexible del ListView.Permite mostrar los datos con 4 disposiciones diferentes:Para utilizar un RecyclerView son necesarios 3 componentes que funcionan conjuntamente para mostrar los datos: RecyclerView: Es el contenedor principal para la interfaz de usuario. ViewHolder: Es la plantilla para mostrar un elemento en el RecyclerView. Cada ítem que se muestra en el RecyclerView es una copia del ViewHolder. Por ejemplo, si el RecyclerView ha de mostrar una lista de productos, cada ViewHolder representa un único producto. Adapter: El adaptador es el encargado de crear los ViewHolder, rellenarlos con los datos, y añadirlos al RecyclerView. RecyclerElementosFragmentEmpezaremos programando el RecyclerElementosFragment para que muestre en un RecyclerView la lista de Elementos (los del ArrayList).Será necesario poner a punto los 3 componentes: RecyclerView ViewHolder AdapterRecyclerViewEl RecyclerView es solamente el contenedor en el cual se van a mostrar los datos. Se añade al layout en el cual se tiene que mostrar la lista. En esta app, en el layout del RecyclerElementosFragment.En principio el RecyclerView estará vacío, y será más adelante cuando se rellenará (mediante código Java) con los Elementos del ArrayList.Lo único a tener en cuenta cuando se añade al layout es especificar la disposición de los ViewHolder; se hace con el atributo app:layoutManager y en esta app utilizamos el LinearLayoutManager (lista vertical).Añade el &lt;RecyclerView&gt; al fichero de layout fragment_recycler_elementos.xml:res/layout/fragment_recycler_elementos.xml&lt;FrameLayout ...&gt; //... &lt;androidx.recyclerview.widget.RecyclerView android:id=\"@+id/recyclerView\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" app:layoutManager=\"androidx.recyclerview.widget.LinearLayoutManager\" /&gt;&lt;/FrameLayout&gt;ViewHolderEl ViewHolder és la plantilla para mostrar un Elemento de la lista. Para crearla, habitualmente se usa: Un fichero layout con la disposición de los widgets de la plantilla (TextView, ImageView, etc…) Una clase que habilite el ViewBinding para poder acceder a los widgets. Crea el fichero de layout viewholder_elemento.xml, con un TextView para mostrar el nombre del Elemento, y un RatingBar para la valoracion.viewholder_elemento.xml&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;&lt;LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\" android:layout_width=\"match_parent\" android:layout_height=\"wrap_content\" android:orientation=\"vertical\"&gt; &lt;TextView android:id=\"@+id/nombre\" android:layout_width=\"match_parent\" android:layout_height=\"wrap_content\" android:textSize=\"32sp\" /&gt; &lt;RatingBar android:id=\"@+id/valoracion\" android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\" android:numStars=\"5\" /&gt;&lt;/LinearLayout&gt;El TextView y el RatingBar se rellenarán con los datos de un Elemento del array. Para ello, creamos una clase en la que guardaremos la variable binding, mediante la cual accederemos al TextView y al RatingBarLlamaremos a esta clase ElementoViewHolder. Debe extender de la clase RecyclerView.ViewHolder.Añade la clase ElementoViewHolder como clase interna de RecyclerElementosFragment:RecyclerElementosFragment.javapublic class RecyclerElementosFragment extends Fragment { // ... class ElementoViewHolder extends RecyclerView.ViewHolder { private final ViewholderElementoBinding binding; public ElementoViewHolder(ViewholderElementoBinding binding) { super(binding.getRoot()); this.binding = binding; } }}Para crear la clase del ViewHolder, hay dos cosas a tener en cuenta: (1) escoger un nombre adecuado y (2) usar la clase ViewBinding correspondiente al fichero de layout. En este caso el fichero de layout es viewholder_elemento.xml así que la clase correspondiente es ViewholderElementoBinding. El resto de código la mayoría de veces es tal cual.AdapterEl Adapter será el encargado de crear las copias del ViewHolder, y rellenarlas con los datos de los Elementos del ArrayList.Para crear un Adaptador hay que extender la clase RecyclerView.Adapter y se debe especificar en el diamante &lt;&gt; la clase del ViewHolder.Se deben anular 3 métodos: onCreateViewHolder(): este método es llamado por el RecyclerView cuando necesita crear una nueva copia del ViewHolder. Se debe retornar una instancia del ViewHolder (en el constructor se inicializa el ViewBinding). onBindViewHolder(): lo llama el RecyclerView para rellenar los datos de un ViewHolder en una posición determinada. Se reciben los parámetros holder y position, que indican el ViewHolder que hay que rellenar y en qué posición está en el RecyclerView. getItemCount(): lo llama el RecyclerView para saber cuántos ViewHolder en total se van a mostrar. Por último, también es muy común hacer que el Adaptador mantenga una referencia al ArrayList de los elementos. Para ello, se declara una variable, y un método para establecerla. Un aspecto clave de este método es la llamada a notifyDatasetChanged(). Este método notifica al RecyclerView que al array ha cambiado y que debe volver a regenerar todos los ViewHolders.El código del adaptador queda así:RecyclerElementosFragment.javapublic class RecyclerElementosFragment extends Fragment { // ... class ElementosAdapter extends RecyclerView.Adapter&lt;ElementoViewHolder&gt; { List&lt;Elemento&gt; elementos; @NonNull @Override public ElementoViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) { return new ElementoViewHolder(ViewholderElementoBinding.inflate(getLayoutInflater(), parent, false)); } @Override public void onBindViewHolder(@NonNull ElementoViewHolder holder, int position) { Elemento elemento = elementos.get(position); holder.binding.nombre.setText(elemento.nombre); holder.binding.valoracion.setRating(elemento.valoracion); } @Override public int getItemCount() { return elementos != null ? elementos.size() : 0; } public void establecerLista(List&lt;Elemento&gt; elementos){ this.elementos = elementos; notifyDataSetChanged(); } }}Para crear la clase del Adaptador, hay que tener en cuenta: La clase del ViewHolder (en este caso ElementoViewHolder) La clase de los ítems del ArrayList (en este caso Elemento) Qué campos hay que rellenar del holder (a los que se accede mediante la variable binding) y con qué datos del ArrayList hay que rellenarlos Una vez creada la clase, hay que crear un objeto y asignarlo al RecyclerView con el método setAdapter().RecyclerElementosFragment.javapublic class RecyclerElementosFragment extends Fragment { // ... @Override public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) { // ... ElementosAdapter elementosAdapter = new ElementosAdapter(); binding.recyclerView.setAdapter(elementosAdapter); } // ...}El último paso solo es asignar el array de Elementos del Adaptador (la variable elementos). El array se observa del ViewModel y se asigna llamando al método establecerLista().RecyclerElementosFragment.javapublic class RecyclerElementosFragment extends Fragment { // ... @Override public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) { // ... elementosViewModel.obtener().observe(getViewLifecycleOwner(), new Observer&lt;List&lt;Elemento&gt;&gt;() { @Override public void onChanged(List&lt;Elemento&gt; elementos) { elementosAdapter.establecerLista(elementos); } }); } // ...}El código completo del RecyclerElementosFragment queda así:RecyclerElementosFragment.javapublic class RecyclerElementosFragment extends Fragment { private FragmentRecyclerElementosBinding binding; private ElementosViewModel elementosViewModel; private NavController navController; @Override public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) { return (binding = FragmentRecyclerElementosBinding.inflate(inflater, container, false)).getRoot(); } @Override public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) { super.onViewCreated(view, savedInstanceState); elementosViewModel = new ViewModelProvider(requireActivity()).get(ElementosViewModel.class); navController = Navigation.findNavController(view); // navegar a NuevoElemento cuando se hace click en el FloatingActionButton binding.irANuevoElemento.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { navController.navigate(R.id.action_recyclerElementosFragment_to_nuevoElementoFragment); } }); // crear el Adaptador ElementosAdapter elementosAdapter = new ElementosAdapter(); // asociar el Adaptador con el RecyclerView binding.recyclerView.setAdapter(elementosAdapter); // obtener el array de Elementos, y pasarselo al Adaptador elementosViewModel.obtener().observe(getViewLifecycleOwner(), new Observer&lt;List&lt;Elemento&gt;&gt;() { @Override public void onChanged(List&lt;Elemento&gt; elementos) { elementosAdapter.establecerLista(elementos); } }); } class ElementosAdapter extends RecyclerView.Adapter&lt;ElementoViewHolder&gt; { // referencia al Array que obtenemos del ViewModel List&lt;Elemento&gt; elementos; // crear un nuevo ViewHolder @NonNull @Override public ElementoViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) { return new ElementoViewHolder(ViewholderElementoBinding.inflate(getLayoutInflater(), parent, false)); } // rellenar un ViewHolder en una posición del Recycler con los datos del elemento que // esté en esa misma posición en el Array @Override public void onBindViewHolder(@NonNull ElementoViewHolder holder, int position) { Elemento elemento = elementos.get(position); holder.binding.nombre.setText(elemento.nombre); holder.binding.valoracion.setRating(elemento.valoracion); } // informar al Recycler de cuántos elementos habrá en la lista @Override public int getItemCount() { return elementos != null ? elementos.size() : 0; } // establecer la referencia a la lista, y notificar al Recycler para que se regenere public void establecerLista(List&lt;Elemento&gt; elementos){ this.elementos = elementos; notifyDataSetChanged(); } } // Clase para inicializar el ViewBinding en los ViewHolder class ElementoViewHolder extends RecyclerView.ViewHolder { private final ViewholderElementoBinding binding; public ElementoViewHolder(ViewholderElementoBinding binding) { super(binding.getRoot()); this.binding = binding; } }}Si ejecutas ahora la app, se debería mostrar la lista de elementos.Interacción con los ViewHolderLos ViewHolder que se muestran en el RecyclerView no responden, por el momento, a ningún tipo de interacción más allá del scroll. Cuando se hace click en ellos “no hacen nada”.Añadiremos tres interacciones: Cambiar la valoración de un Elemento tocando el RatingBar Eliminar un Elemento cuando se desliza el dedo hacia un lado. Navegar a la pantalla para mostrar el detalle del Elemento cuando se clica en el ViewHolder WidgetsLos widgets que contiene el ViewHolder (TextViews, ImageViews, Buttons, etc…) son accesibles a través de la variable binding. En esta app nos interesa el widget RatingBar con el que podremos “valorar” los Elementos.El widget RatingBar permite establecer un listener OnRatingBarChangeListener que se activa cuando se cambia el número de estrellas.En el callback se pasa el nuevo rating y un parámetro fromUser, que indica si el rating ha cambiado porque el usuario ha tocado las estrellas, o bien si el rating ha cambiado porque se ha llamado al método setRating() desde código Java.Estableceremos los listeners de los widgets dentro del método onBindViewHolder() del Adaptador, ya que es ahí donde se asocian (bind) con un Elemento concreto del Array, de forma que quedará vinculado el cambio de rating con ese Elemento en particular:RecyclerElementosFragment.java// ...@Overridepublic void onBindViewHolder(@NonNull ElementoViewHolder holder, int position) { // ... holder.binding.valoracion.setOnRatingBarChangeListener(new RatingBar.OnRatingBarChangeListener() { @Override public void onRatingChanged(RatingBar ratingBar, float rating, boolean fromUser) { if(fromUser) { elementosViewModel.actualizar(elemento, rating); } } });}Si ejecutas la app, se debería poder cambiar la valoración de un Elemento.ItemTouchHelperLos gestos sobre un ViewHolder (swipe y move) se implementan usando la clase ItemTouchHelper. Hay que crear una instancia de esta clase definiendo las acciones a realizar cuando se produzcan los gestos, y vincularla al RecyclerView.En el constructor le pasamos el callback mediante el cual nos notificará los gestos que se han realizado.En el constructor del callback indicamos los tipos de gestos que queremos permitir, y anulamos dos métodos: onMove(): se llamará cada vez que un ViewHolder sea arrastrado hacia arriba o hacia abajo. onSwiped(): se llamará cada vez que un ViewHolder sea arrastrado a izquerda o derecha. Para esta app solamente implementaremos onSwiped() y la acción que realizaremos será eliminar el Elemento que se ha deslizado.El callback onSwiped() nos pasa el ViewHolder que se ha deslizado, y podemos obtener su posición en el RecyclerView con getAdapterPosition().Para obtener el objeto Elemento que está asociado al ViewHolder de esa posición añadiremos un método al ElementosAdapter que nos retorne dicho Elemento.Una vez obtenido el Elemento que está asociado al ViewHolder que se ha deslizado, llamamos al método eliminar() del ViewModel, para que lo elimine.RecyclerElementosFragment.javapublic class RecyclerElementosFragment extends Fragment { // ... @Override public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) { // ... new ItemTouchHelper(new ItemTouchHelper.SimpleCallback( ItemTouchHelper.UP | ItemTouchHelper.DOWN, ItemTouchHelper.RIGHT | ItemTouchHelper.LEFT) { @Override public boolean onMove(@NonNull RecyclerView recyclerView, @NonNull RecyclerView.ViewHolder viewHolder, @NonNull RecyclerView.ViewHolder target) { return true; } @Override public void onSwiped(@NonNull RecyclerView.ViewHolder viewHolder, int direction) { int posicion = viewHolder.getAdapterPosition(); Elemento elemento = elementosAdapter.obtenerElemento(posicion); elementosViewModel.eliminar(elemento); } }).attachToRecyclerView(binding.recyclerView); } //... class ElementosAdapter extends RecyclerView.Adapter&lt;ElementoViewHolder&gt; { // ... public Elemento obtenerElemento(int posicion){ return elementos.get(posicion); } }}Si ejecutas la app, se debería poder eliminar un Elemento haciendo swipe.ItemViewAhora haremos que cuando se toque en un ViewHolder, el detalle del Elemento que esté rellenado en él, se muestre en la pantalla de Mostrar Elemento.Para detectar el toque en un ViewHolder, esta clase guarda en la variable itemView el elemento raíz del layout, es decir, todo el layout completo. Pondremos en esta variable itemView el OnClickListener para que se detecte el click en qualquier parte del ViewHolder.La acción a realizar cuando se haga click en el itemView será navegar a la pantalla MostrarElementoFragment, pero previamente guardaremos en el ViewModel cuál ha sido el Elemento asociado al ViewHolder en el que se ha hecho click.Creamos esta variable elementoSeleccionado en el ViewModel, y métodos setter/getter para establecerla y obtenerla:ElementosViewModel.javapublic class ElementosViewModel extends AndroidViewModel { //... MutableLiveData&lt;Elemento&gt; elementoSeleccionado = new MutableLiveData&lt;&gt;(); //... void seleccionar(Elemento elemento){ elementoSeleccionado.setValue(elemento); } MutableLiveData&lt;Elemento&gt; seleccionado(){ return elementoSeleccionado; }}Ahora ya podemos implementar el onclick:RecyclerElementosFragment.java// ...@Overridepublic void onBindViewHolder(@NonNull ElementoViewHolder holder, int position) { // ... holder.itemView.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { elementosViewModel.seleccionar(elemento); navController.navigate(R.id.action_recyclerElementosFragment_to_mostrarElementoFragment); } });}Si ejecutas la app, se debería navegar a la pantalla de detalle cuando se toca un elemento (aunque esta pantalla aparecerá vacía por el momento).MostrarElementoFragmentEsta pantalla, muestra el detalle del Elemento que ha sido seleccionado en el RecyclerView.Observará la variable elementoSeleccionado del ViewModel, y rellenará el layout con sus datos.También establecemos un listener al RatingBar que permita modificar su valoración:MostrarElementoFragment.javapublic class MostrarElementoFragment extends Fragment { //... @Override public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) { //... elementosViewModel.seleccionado().observe(getViewLifecycleOwner(), new Observer&lt;Elemento&gt;() { @Override public void onChanged(Elemento elemento) { binding.nombre.setText(elemento.nombre); binding.descripcion.setText(elemento.descripcion); binding.valoracion.setRating(elemento.valoracion); binding.valoracion.setOnRatingBarChangeListener(new RatingBar.OnRatingBarChangeListener() { @Override public void onRatingChanged(RatingBar ratingBar, float rating, boolean fromUser) { if(fromUser){ elementosViewModel.actualizar(elemento, rating); } } }); } }); }}Si ejecutas la app, esta pantalla debería mostrar el detalle del Elemento.NuevoElementoFragmentLa pantalla NuevoElementoFragment permite introducir el nombre y descripcion de un Elemento y llama al método insertar() del ViewModel para añadirlo a la lista (cuando se hace clic en el botón).Automáticamente, vuelve a la pantalla anterior con popBackStack():NuevoElementoFragment.javapublic class NuevoElementoFragment extends Fragment { //... @Override public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) { //... binding.crear.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View v) { String nombre = binding.nombre.getText().toString(); String descripcion = binding.descripcion.getText().toString(); elementosViewModel.insertar(new Elemento(nombre, descripcion)); navController.popBackStack(); } }); }}Si ejecutas la app, esta pantalla debería permitir añadir Elementos.PrácticaImplementa una app que muestre una interfaz Master/Detail.Los elementos de la lista pueden ser cualquiera (pokemons, lols, productos, libros, etc…), y deben estar predefinidos en el Model.No es necesario que implementes la funcionalidad de añadir elementos, ni modificar, ni eliminar." }, { "title": "Android Cheat Sheet", "url": "/documentacion/posts/android-cheatsheet/", "categories": "Android", "tags": "cheatsheet, android", "date": "2022-06-08 10:23:00 +0200", "snippet": "Android Cheat SheetViewBindingbuild.gradleandroid { buildFeatures { viewBinding true }}Activity.javasetContentView((binding = ActivityMainBinding.inflate(getLayoutInflater())).getRoot(...", "content": "Android Cheat SheetViewBindingbuild.gradleandroid { buildFeatures { viewBinding true }}Activity.javasetContentView((binding = ActivityMainBinding.inflate(getLayoutInflater())).getRoot());Fragment.javareturn (binding = FragmentMainBinding.inflate(inflater, container, false)).getRoot();Navigation&lt;androidx.fragment.app.FragmentContainerView android:name=\"androidx.navigation.fragment.NavHostFragment\" android:id=\"@+id/nav_host_fragment\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" app:defaultNavHost=\"true\" app:navGraph=\"@navigation/nav_graph\" /&gt;NavController (Fragment)navController = Navigation.findNavController(view);NavController (Activity)navController = ((NavHostFragment) getSupportFragmentManager().findFragmentById(R.id.nav_host_fragment)).getNavController();NavController (DialogFragment)navController = Navigation.findNavController(requireParentView());" }, { "title": "Navigation", "url": "/documentacion/posts/navigation/", "categories": "Android, navigation", "tags": "java, android, navigation", "date": "2022-06-08 07:12:00 +0200", "snippet": "NavigationEl componente Navigation incluye una clase NavigationUI. Esta clase contiene métodos estáticos que administran la navegación con el NavigationView, el BottomNavigationView y el OptionsMen...", "content": "NavigationEl componente Navigation incluye una clase NavigationUI. Esta clase contiene métodos estáticos que administran la navegación con el NavigationView, el BottomNavigationView y el OptionsMenu.Además de usar estos elementos de navegación, en esta práctica usaremos también la navegación mediante Tabs (o pestañas), usando los elementos TabLayout y ViewPager2, aunque estos no están incluidos en el componente Navigation.Desarrollaremos una app que permitirá navegar entre destinos usando todos estos elementos.https://github.com/gerardfp/navigationCrea el proyectoEn el asistente de “Nueva Activity”, Android Studio proporciona plantillas para crear Activities que incluyen estos componentes de navegación. Sin embargo, esta vez lo haremos “desde 0”, para comprender todos los elementos que intervienen. Selecciona Empty Activity como plantilla para la MainActivity Añade las dependencias para incluir el componente Navigation, ViewPager2 y Material: build.gradle dependencies { implementation 'androidx.navigation:navigation-fragment:2.3.0' implementation 'androidx.navigation:navigation-ui:2.3.0' implementation 'androidx.viewpager2:viewpager2:1.0.0' implementation 'com.google.android.material:material:1.3.0-alpha03'} Habilita el ViewBinding: build.gradle android { buildFeatures { viewBinding true }} Por último, deshabilitaremos la ActionBar (la barra superior) que se incluye de forma automática en todas las Activities, ya que en este proyecto utilizaremos la versión más reciente Toolbar, que se integra mejor con los elementos de navegación: Añade los siguientes elementos al fichero styles.xml: res/values/styles.xml &lt;resources&gt; &lt;style name=\"AppTheme\" parent=\"Theme.AppCompat.Light.DarkActionBar\"&gt; ... &lt;item name=\"windowActionBar\"&gt;false&lt;/item&gt; &lt;item name=\"windowNoTitle\"&gt;true&lt;/item&gt; &lt;/style&gt;&lt;/resources&gt; Para más info sobre la actualización de la ActionBar por la Toolbar, consulta: Cómo configurar la barra de la app ActivitiesCada uno de elementos de navegación (NavigationView, BottomNavigationView, OptionsMenu y TabLayout + ViewPager2) lo implementaremos en una Activity diferente y usaremos la MainActivity para lanzar las diferentes Activities.Empezaremos creando estas Activities, con los nombres: DrawerActivity, BottomActivity, OptionsActivity y TabbedActivity.Para crear una Activity selcciona New &gt; Activity &gt; Empty &gt; ActivityObserva que cuando creas una Activity con el asistente, e introduces un nombre como AbcActivity, automáticamente se crea un archivo AbcActivity.java para la clase, y otro activity_abc.xml para el layout.También se crea una entrada para la activity en el elemento del fichero AndroidManifest.ToolbarAhora el siguinte paso será añadir una Toolbar en cada una de estas activities.La Toolbar se utilitza conjuntamente con el CoordinatorLayout y el AppBarLayout que permiten utilizar transiciones y animaciones (por ejemplo una Collapsing Toolbar). Aunque en esta práctica no las haremos, mejor si la usamos desde el principio.Sustituye el layout de cada una de las 5 activities por este layout:res/layout/activity_$$$.xml&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;&lt;androidx.coordinatorlayout.widget.CoordinatorLayout xmlns:android=\"http://schemas.android.com/apk/res/android\" xmlns:app=\"http://schemas.android.com/apk/res-auto\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\"&gt; &lt;com.google.android.material.appbar.AppBarLayout android:id=\"@+id/appBarLayout\" android:layout_width=\"match_parent\" android:layout_height=\"wrap_content\" android:theme=\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\"&gt; &lt;androidx.appcompat.widget.Toolbar android:id=\"@+id/toolbar\" android:layout_width=\"match_parent\" android:layout_height=\"?attr/actionBarSize\" android:background=\"?attr/colorPrimary\" app:popupTheme=\"@style/ThemeOverlay.AppCompat.Light\" /&gt; &lt;/com.google.android.material.appbar.AppBarLayout&gt; &lt;androidx.constraintlayout.widget.ConstraintLayout android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" app:layout_behavior=\"@string/appbar_scrolling_view_behavior\"&gt; &lt;!-- Aqui va el contenido de la activity --&gt; &lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;&lt;/androidx.coordinatorlayout.widget.CoordinatorLayout&gt;MainActivityEl siguiente paso es añadir 4 botones en la MainActivity para que cada uno nos lleve a una de las otras Activities.En el &lt;ConstraintLayout&gt; de la activity_main.xml añade los 4 botones:res/layout/activity_main.xml&lt;androidx.constraintlayout.widget.ConstraintLayout android:layout_width=\"match_parent\" android:layout_height=\"match_parent\"&gt; &lt;Button android:id=\"@+id/action_goto_drawerActivity\" android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\" android:text=\"Drawer\" app:layout_constraintBottom_toTopOf=\"@id/action_goto_bottomActivity\" app:layout_constraintLeft_toLeftOf=\"parent\" app:layout_constraintRight_toRightOf=\"parent\" app:layout_constraintTop_toTopOf=\"parent\" /&gt; &lt;Button android:id=\"@+id/action_goto_bottomActivity\" android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\" android:text=\"Bottom\" app:layout_constraintBottom_toTopOf=\"@id/action_goto_optionsActivity\" app:layout_constraintLeft_toLeftOf=\"parent\" app:layout_constraintRight_toRightOf=\"parent\" app:layout_constraintTop_toBottomOf=\"@id/action_goto_drawerActivity\" /&gt; &lt;Button android:id=\"@+id/action_goto_optionsActivity\" android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\" android:text=\"Options\" app:layout_constraintBottom_toTopOf=\"@id/action_goto_tabbedActivity\" app:layout_constraintLeft_toLeftOf=\"parent\" app:layout_constraintRight_toRightOf=\"parent\" app:layout_constraintTop_toBottomOf=\"@id/action_goto_bottomActivity\" /&gt; &lt;Button android:id=\"@+id/action_goto_tabbedActivity\" android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\" android:text=\"Tabs\" app:layout_constraintBottom_toBottomOf=\"parent\" app:layout_constraintLeft_toLeftOf=\"parent\" app:layout_constraintRight_toRightOf=\"parent\" app:layout_constraintTop_toBottomOf=\"@id/action_goto_optionsActivity\" /&gt;&lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;Ahora implementamos el comportamiento del evento clic, añadiendo un OnClickListener en cada botón, de manera que cuando se haga clic en un botón se iniciará la activity correspondiente.Para iniciar una Activity hay que llamar al método startActivity() y pasarle un objeto de clase Intent, indicando en los parámetros del constructor el objeto de la Activity en la que estamos y la clase de la Activity que queremos iniciar.Reemplaza el código de la clase MainActivity por este (¡excepto la primera linea del package!). Usa Alt + Intro para importar la clase de viewbinding:MainActivity.javaimport android.content.Intent;import android.os.Bundle;import android.view.View;import androidx.appcompat.app.AppCompatActivity;public class MainActivity extends AppCompatActivity { ActivityMainBinding binding; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView((binding = ActivityMainBinding.inflate(getLayoutInflater())).getRoot()); setSupportActionBar(binding.toolbar); binding.actionGotoDrawerActivity.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { startActivity(new Intent(MainActivity.this, DrawerActivity.class)); } }); binding.actionGotoBottomActivity.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { startActivity(new Intent(MainActivity.this, BottomActivity.class)); } }); binding.actionGotoOptionsActivity.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { startActivity(new Intent(MainActivity.this, OptionsActivity.class)); } }); binding.actionGotoTabbedActivity.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { startActivity(new Intent(MainActivity.this, TabbedActivity.class)); } }); }}La llamada a setSupportActionBar() hace que la Activity utilice la Toolbar que hemos puesto en el layout, en lugar de la ActionBar que venia por defecto, y que hemos ocultado.Observa que el primer parámetro del Intent siempre es MainActivity.this, es decir, el objeto correspondiente a la MainActivity (la activity en la que estamos). En cambio el segundo parámetro es la clase .class de la activity que queremos iniciar en cada botón.Si ejecutas ahora la app, comprobarás que cada botón nos lleva a una Activity, que todavía está en blanco. En los siguientes pasos, implementaremos la navegación usando un menú diferente para cada una de estas activities.NavigationViewEl NavigationView (más conocido como “Drawer menu”) es el menú de navegación que suele aparecer por la izquierda de la app cuando se pulsa el icono HamburgerEn la DrawerActivity de esta app usaremos un NavigationView para navegar a 3 destinos (fragments).Empezamos creando el Grafo de Navegación, al que llamaremos drawer_graph.xml. En él añadimos los 3 destinos. Para tener presente que estos destinos serán accesibles desde el Drawer, les llamaremos: Drawer1Fragment, Drawer2Fragment, Drawer3Fragment.Crea el grafo drawer_graph.xml y añade los 3 destinos:En este grafo de navegación no hemos creado ninguna acción de navegación, ya que los 3 destinos son independientes ente sí, es decir, no se navega de ninguno a otro, sino que todos son accesibles desde el menú drawer.El siguiente paso lógico debería ser añadir el NavHostFragment en el layout activity_drawer.xml, pero no lo hacemos ahora ya que en el siguiente paso hay que volver a modificar el layout.Añadir el NavigationViewAndroid proporciona el DrawerLayout para ser utilizado con el NavigationView. Su única función es permitir que el NavigationView pueda ponerse “por encima” de los otros elementos.Añadiremos el NavigationView a la DrawerActivity. Reemplaza el contenido del fichero res/layout/activity_drawer.xml por este:res/layout/activity_drawer.xml&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;&lt;androidx.drawerlayout.widget.DrawerLayout xmlns:android=\"http://schemas.android.com/apk/res/android\" xmlns:app=\"http://schemas.android.com/apk/res-auto\" android:id=\"@+id/drawer_layout\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" android:fitsSystemWindows=\"true\"&gt; &lt;androidx.coordinatorlayout.widget.CoordinatorLayout android:layout_width=\"match_parent\" android:layout_height=\"match_parent\"&gt; &lt;com.google.android.material.appbar.AppBarLayout android:id=\"@+id/appBarLayout\" android:layout_width=\"match_parent\" android:layout_height=\"wrap_content\" android:theme=\"@style/ThemeOverlay.AppCompat.Dark.ActionBar\"&gt; &lt;androidx.appcompat.widget.Toolbar android:id=\"@+id/toolbar\" android:layout_width=\"match_parent\" android:layout_height=\"?attr/actionBarSize\" android:background=\"?attr/colorPrimary\" app:popupTheme=\"@style/ThemeOverlay.AppCompat.Light\" /&gt; &lt;/com.google.android.material.appbar.AppBarLayout&gt; &lt;androidx.constraintlayout.widget.ConstraintLayout android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" app:layout_behavior=\"@string/appbar_scrolling_view_behavior\"&gt; &lt;androidx.fragment.app.FragmentContainerView android:name=\"androidx.navigation.fragment.NavHostFragment\" android:id=\"@+id/nav_host_fragment\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" app:defaultNavHost=\"true\" app:navGraph=\"@navigation/drawer_graph\" /&gt; &lt;/androidx.constraintlayout.widget.ConstraintLayout&gt; &lt;/androidx.coordinatorlayout.widget.CoordinatorLayout&gt; &lt;com.google.android.material.navigation.NavigationView android:id=\"@+id/nav_view\" android:layout_width=\"wrap_content\" android:layout_height=\"match_parent\" android:layout_gravity=\"start\" android:fitsSystemWindows=\"true\" app:headerLayout=\"@layout/drawer_header\" app:menu=\"@menu/drawer_menu\"/&gt;&lt;/androidx.drawerlayout.widget.DrawerLayout&gt;Observa que dentro del DrawerLayout hemos puesto el CoordinatorLayout que ya teníamos y el NavigationView.Además hemos añadido el NavHostFragment que nos habíamos saltado antes. En él es donde se mostrarán los 3 destinos que hemos creado en el grafo drawer_graph.xml.Cabecera y menúObserva que hay dos atributos XML en el elemento NavigationView que aparecen en rojo. Estos son el app:headerLayout y el app:menu. Estos dos atributos definen los ficheros en que se encuentran el layout de la cabecera y los ítems del menú:Crearemos estos dos ficheros, y definiremos la cabecera y el menú: Cabecera: Haz clic-derecho sobre la carpeta res/layout y ve a New &gt; Layout Resource File Introduce File name: drawer_header En el layout de la cabecera añadiremos una imagen y un texto: res/layout/drawer_header.xml &lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;&lt;LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\" xmlns:app=\"http://schemas.android.com/apk/res-auto\" android:layout_width=\"match_parent\" android:layout_height=\"wrap_content\" android:background=\"#009688\" android:gravity=\"center\" android:orientation=\"vertical\"&gt; &lt;ImageView android:id=\"@+id/imageView\" android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\" android:paddingTop=\"48dp\" app:srcCompat=\"@mipmap/ic_launcher_round\" /&gt; &lt;TextView android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\" android:paddingTop=\"8dp\" android:text=\"Android is HARD\" /&gt;&lt;/LinearLayout&gt; Menu: Haz clic-derecho sobre la carpeta res y ve a New &gt; Android Resource File Introduce File name: drawer_menu, Selecciona Resource type: Menu. Añadiremos 3 ítems al menú, que navegarán a los destinos correspondientes. Para conectar los ítems con los destinos hay que hacer coincidir los id de los ítems con los que tienen los fragments en el grafo de navegación (drawer_graph.xml). res/menu/drawer_menu.xml &lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;&lt;menu xmlns:android=\"http://schemas.android.com/apk/res/android\"&gt; &lt;item android:id=\"@+id/drawer1Fragment\" android:icon=\"@android:drawable/ic_menu_directions\" android:title=\"Drawer 1\" /&gt; &lt;item android:id=\"@+id/drawer2Fragment\" android:icon=\"@android:drawable/ic_menu_directions\" android:title=\"Drawer 2\" /&gt; &lt;item android:id=\"@+id/drawer3Fragment\" android:icon=\"@android:drawable/ic_menu_directions\" android:title=\"Drawer 3\" /&gt;&lt;/menu&gt; Establecemos el valor de los atributos android:icon y android:title que deseemos. NavigationUILa clase NavigationUI, es la encargada de administrar la navegación. Cuando se haga clic en un ítem del menú, se encargará de: resaltar el ítem seleccionado en el menú cambiar el título en la Toolbar mostrar el destino (fragment) seleccionado en el NavHostFragment gestionar el icono hamburguer (mostrando el o la flecha atrás ) Para activar y configurar NavigationUI, hay que llamar a una serie de métodos estáticos.Llamaremos a estos métodos desde la DrawerActivity, ya que en ella hemos puesto el NavigationView, la Toolbar y el NavHostFragment.El código de la DrawerActivity debe quedar así:DrawerActivity.javaimport android.os.Bundle;import androidx.appcompat.app.AppCompatActivity;import androidx.navigation.NavController;import androidx.navigation.fragment.NavHostFragment;import androidx.navigation.ui.AppBarConfiguration;import androidx.navigation.ui.NavigationUI;public class DrawerActivity extends AppCompatActivity { ActivityDrawerBinding binding; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView((binding = ActivityDrawerBinding.inflate(getLayoutInflater())).getRoot()); setSupportActionBar(binding.toolbar); AppBarConfiguration appBarConfiguration = new AppBarConfiguration.Builder( // Top-level destinations: R.id.drawer1Fragment, R.id.drawer2Fragment ) .setOpenableLayout(binding.drawerLayout) .build(); NavController navController = ((NavHostFragment) getSupportFragmentManager().findFragmentById(R.id.nav_host_fragment)).getNavController(); NavigationUI.setupWithNavController(binding.navView, navController); NavigationUI.setupWithNavController(binding.toolbar, navController, appBarConfiguration); }}Hay 2 cosas que obsevar en este código: La función del objeto appBarConfiguration es definir los destinos que serán Top-level destinations. Si marcamos un destino como Top-level, cuando se navegue a él, se mostrará el icono hamben la Toolbar. En los destinos que no los pongamos como Top-level, se mostrará la flecha de “atrás”. Las llamadas al método estático setupWithNavController() són las que habilitan a NavigationUI a administrar la navegación, sincronizando el menu NavigationView y la barra superior Tooblar, con los destinos a los que se navega.Ahora puedes ejecutar la app, abrir la DrawerActivity, y navegar usando el NaviagtionView por los 3 destinos: Drawer1Fragment, Drawer2Fragment y Drawer3Fragment. Observa cómo en el tercer fragment, se muestra la flecha de “atrás”, ya que no es un destino Top-level.BottomNavigationViewEl BottomNavigationView es la barra de menú que se muestra en la parte inferior de la pantalla.Añadiremos este menú en la BottomActiviy para navegar a 3 destinos.Creamos el grafo de navegación bottom_graph.xml, y añadimos tres destinos a los que llamaremos Bottom1Fragment, Bottom2Fragment y Bottom3Fragment:Añadimos el NavHostFragment en el layout de la BottomActivity. En él se mostrarán los destinos según se vaya navegando.Añade el NavHostFragment dentro del ConstraintLayout:res/layout/activity_bottom.xml&lt;androidx.constraintlayout.widget.ConstraintLayout ... &gt; &lt;androidx.fragment.app.FragmentContainerView android:name=\"androidx.navigation.fragment.NavHostFragment\" android:id=\"@+id/nav_host_fragment\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" app:defaultNavHost=\"true\" app:navGraph=\"@navigation/bottom_graph\" /&gt;&lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;Observa que hemos enlazado el NavHostFragment con el grafo bottom_graph.Añadir el BottomNavigationView al layoutAñade el elemento &lt;BottomNavigationView&gt; al layout de la BottomActivity. Colócalo dentro del ConstraintLayout, justo debajo del NavHostFragment:res/layout/activity_bottom.xml&lt;androidx.constraintlayout.widget.ConstraintLayout ...&gt; &lt;androidx.fragment.app.FragmentContainerView .../&gt; &lt;com.google.android.material.bottomnavigation.BottomNavigationView android:id=\"@+id/bottom_nav_view\" android:layout_width=\"0dp\" android:layout_height=\"wrap_content\" android:background=\"?android:attr/windowBackground\" app:layout_constraintBottom_toBottomOf=\"parent\" app:layout_constraintLeft_toLeftOf=\"parent\" app:layout_constraintRight_toRightOf=\"parent\" app:menu=\"@menu/bottom_menu\" /&gt;&lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;MenuCrea el archivo de menú para el BottomNavigationView (res/menu/bottom_menu.xml):Añade los 3 ítems al menú (el id del item debe coincidir con el id del destino):res/menu/bottom_menu.xml&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;&lt;menu xmlns:android=\"http://schemas.android.com/apk/res/android\"&gt; &lt;item android:id=\"@+id/bottom1Fragment\" android:icon=\"@android:drawable/ic_menu_directions\" android:title=\"Bottom 1\" /&gt; &lt;item android:id=\"@+id/bottom2Fragment\" android:icon=\"@android:drawable/ic_menu_directions\" android:title=\"Bottom 2\" /&gt; &lt;item android:id=\"@+id/bottom3Fragment\" android:icon=\"@android:drawable/ic_menu_directions\" android:title=\"Bottom 3\" /&gt;&lt;/menu&gt;NavigationUIAhora configuraremos NavigationUI en la BottomActivity, para que administre la navegación del BottomNavigationView, y sincronice los títulos en la Toolbar.El código de la BottomActivity debe quedar así:BottomActivity.javaimport android.os.Bundle;import androidx.appcompat.app.AppCompatActivity;import androidx.navigation.NavController;import androidx.navigation.fragment.NavHostFragment;import androidx.navigation.ui.NavigationUI;public class BottomActivity extends AppCompatActivity { ActivityBottomBinding binding; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView((binding = ActivityBottomBinding.inflate(getLayoutInflater())).getRoot()); setSupportActionBar(binding.toolbar); NavController navController = ((NavHostFragment) getSupportFragmentManager().findFragmentById(R.id.nav_host_fragment)).getNavController(); NavigationUI.setupWithNavController(binding.bottomNavView, navController); NavigationUI.setupWithNavController(binding.toolbar, navController); }}Ejecuta la app, y comprueba que en la BottomActivity se puede navegar por los 3 destino usando el BottomNavigationView.OptionsMenuEl OptionsMenu es el menu desplegable que aparece en la parte superior derecha cuando se hace clic en el icono de los 3 puntosLo usaremos para navegar a 3 destinosCrea el grafo de navegación options_graph.xml y añade 3 destinos: Options1Fragment, Options2Fragment y Options3Fragment.Añade el NavHostFragment en el layout activity_options.xml. Colócalo dentro del ConstraintLayout:res/layout/activity_options.xml&lt;androidx.constraintlayout.widget.ConstraintLayout ...&gt; &lt;androidx.fragment.app.FragmentContainerView android:name=\"androidx.navigation.fragment.NavHostFragment\" android:id=\"@+id/nav_host_fragment\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" app:defaultNavHost=\"true\" app:navGraph=\"@navigation/options_graph\" /&gt;&lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;Observa que hemos enlazado el NavHostFragment con el grafo options_graph.MenuCrea el archivo de menú para el OptionsMenu (res/menu/options_menu.xml). Añade los ítems:res/menu/options_menu.xml&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;&lt;menu xmlns:android=\"http://schemas.android.com/apk/res/android\" xmlns:app=\"http://schemas.android.com/apk/res-auto\"&gt; &lt;item android:id=\"@+id/options1Fragment\" android:icon=\"@android:drawable/ic_menu_directions\" android:title=\"Options 1\" app:showAsAction=\"always\"/&gt; &lt;item android:id=\"@+id/options2Fragment\" android:icon=\"@android:drawable/ic_menu_directions\" android:title=\"Options 2\" /&gt; &lt;item android:id=\"@+id/options3Fragment\" android:icon=\"@android:drawable/ic_menu_directions\" android:title=\"Options 3\" /&gt;&lt;/menu&gt;En el item options1Fragment hemos añadido el atributo app:showAsAction=\"always\", esto hará que esta opción del menú no se muestre en el desplegable, sino que se muestre como un icono en la barra.NavigationUIPor último, configuraremos NavigationUI para que gestione la navegación del Options Menu.OptionsActivity.javaimport android.os.Bundle;import android.view.Menu;import android.view.MenuItem;import androidx.appcompat.app.AppCompatActivity;import androidx.navigation.NavController;import androidx.navigation.fragment.NavHostFragment;import androidx.navigation.ui.AppBarConfiguration;import androidx.navigation.ui.NavigationUI;public class OptionsActivity extends AppCompatActivity { ActivityOptionsBinding binding; private NavController navController; @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView((binding = ActivityOptionsBinding.inflate(getLayoutInflater())).getRoot()); setSupportActionBar(binding.toolbar); AppBarConfiguration appBarConfiguration = new AppBarConfiguration.Builder( R.id.options1Fragment, R.id.options2Fragment ) .build(); navController = ((NavHostFragment) getSupportFragmentManager().findFragmentById(R.id.nav_host_fragment)).getNavController(); NavigationUI.setupWithNavController(binding.toolbar, navController, appBarConfiguration); } @Override public boolean onCreateOptionsMenu(Menu menu) { getMenuInflater().inflate(R.menu.options_menu, menu); return true; } @Override public boolean onOptionsItemSelected(MenuItem item) { return NavigationUI.onNavDestinationSelected(item, navController) || super.onOptionsItemSelected(item); }}En esta activity se han anulado (@Override) dos métodos: El método onCreateOptionsMenu() establece los ítems del OptionsMenu (los que hemos establecido en el fichero R.menu.options_menu). El método onOptionsItemSelected() hace que se use el navController para navegar al destino cuando se pulse en un ítem. Ejecuta la app y comprueba la navegación con el OptionsMenu. Observa que el primer ítem aparece como un icono en la barra. Y también que cuando se navega al tercer fragment, aparece el boton de “atrás”, ya que no está puesto como destino Top-level.TabLayout y ViewPager2El elemento ViewPager2 permite crear vistas deslizantes a las que se puede navegar deslizando el dedo. El elemento TabLayout añade unas pestañas en la parte superior.Estos elementos no forman parte del componente Navigation, y no son gestionados por NavigationUI.En la activity TabbedActivity, añadiremos un fragment que incluirá un ViewPager2 y un TabLayout, que permitirán deslizarse entre 3 fragments (A, B y C).Empezaremos creando el grafo de navegación de la TabbedActivity, al que llamaremos tabbed_graph.xml. En este grafo añadimos únicamente el fragment Tabbed1Fragment.Añadimos el NavHostFragment al layout activity_tabbed.xml:res/layout/activity_tabbed.xml&lt;androidx.constraintlayout.widget.ConstraintLayout ...&gt; &lt;androidx.fragment.app.FragmentContainerView android:name=\"androidx.navigation.fragment.NavHostFragment\" android:id=\"@+id/nav_host_fragment\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" app:defaultNavHost=\"true\" app:navGraph=\"@navigation/tabbed_graph\" /&gt;&lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;En este NavHostFragment únicamente se mostrará el Tabbed1Fragment.Crear las páginas deslizantesCrearemos 3 fragments (A, B, C), que serán los que se deslizen por el Tabbed1Fragment.Estos 3 fragments no se crean en el grafo de navegación, ya que no se navegará entre ellos usando Navigation, sino usando el ViewPager2.Llamaremos a estos fragments: Tabbed1AFragment, Tabbed1BFragment y Tabbed1CFragment.Para crear un Fragment: clic-derecho sobre app y New &gt; Fragment &gt; Fragment (Blank).Crea los 3 fragments: Tabbed1AFragment, Tabbed1BFragment y Tabbed1CFragment.Añadir el ViewPager2En el layout del Tabbed1Fragment añadimos el ViewPager2. En él se mostrarán los 3 fragments (A,B,C) que hemos creado.res/layout/fragment_tabbed1.xml&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;&lt;FrameLayout xmlns:android=\"http://schemas.android.com/apk/res/android\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\"&gt; &lt;androidx.viewpager2.widget.ViewPager2 android:id=\"@+id/viewPager\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" /&gt;&lt;/FrameLayout&gt;Para vincular los 3 fragments (A,B,C) con el ViewPager2, hay que llamar al método setAdapter() y pasárle un objeto FragmentStateAdapter con la configuración.Realizaremos esta llamada en el método onViewCreated() del Tabbed1Fragment.La clase Tabbed1Fragment debe quedar así:Tabbed1Fragment.javaimport android.os.Bundle;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import androidx.annotation.NonNull;import androidx.annotation.Nullable;import androidx.fragment.app.Fragment;import androidx.viewpager2.adapter.FragmentStateAdapter;public class Tabbed1Fragment extends Fragment { private FragmentTabbed1Binding binding; @Override public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) { return (binding = FragmentTabbed1Binding.inflate(inflater, container, false)).getRoot(); } @Override public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) { super.onViewCreated(view, savedInstanceState); binding.viewPager.setAdapter(new FragmentStateAdapter(this) { @NonNull @Override public Fragment createFragment(int position) { switch (position) { case 0: default: return new Tabbed1AFragment(); case 1: return new Tabbed1BFragment(); case 2: return new Tabbed1CFragment(); } } @Override public int getItemCount() { return 3; } }); }}El objeto de clase FragmentStateAdapter configura el viewPager anulando dos métodos: createFragment() retorna el fragment que se debe mostrar en función de la posición de la página. getItemCount() retorna el número de páginas que debe tener el viewPager. Si ejecutas la app, verás que se pueden deslizar los 3 fragments (A,B,C).Añadir el TabLayoutEn el layout fragment_tabbed1.xml añadimos el &lt;TabLayout&gt; justo arriba del ViewPager2. Reemplaza el contenido por el siguiente:res/layout/fragment_tabbed1.xml&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;&lt;LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" android:orientation=\"vertical\"&gt; &lt;com.google.android.material.tabs.TabLayout android:id=\"@+id/tabLayout\" android:layout_width=\"match_parent\" android:layout_height=\"wrap_content\"/&gt; &lt;androidx.viewpager2.widget.ViewPager2 android:id=\"@+id/viewPager\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" /&gt;&lt;/LinearLayout&gt;Hemos cambiado el FrameLayout por un LinearLayout con orientacion vertical, para que el TabLayout y el ViewPager2 se muestren un encima el otro.Para vincular el TabLayout con el ViewPager2, de forma que la página cambie cuando se pulsa en una pestaña, y viceversa, hay que crear un objeto TabLayoutMediator al que se le pasan el TabLayout y ViewPager2. También se le pasa un TabConfigurationStrategy indicando el titulo que se debe mostrar en cada Tab. Por último, se llama al método attach() de este objeto.Añade el código resaltado en Tabbed1Fragment:Tabbed1Fragment.javapublic class Tabbed1Fragment extends Fragment { ... @Override public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) { ... binding.viewPager.setAdapter(new FragmentStateAdapter(this) { ... }); new TabLayoutMediator(binding.tabLayout, binding.viewPager, new TabLayoutMediator.TabConfigurationStrategy() { @Override public void onConfigureTab(@NonNull TabLayout.Tab tab, int position) { switch (position) { case 0: default: tab.setText(\"TAB A\"); break; case 1: tab.setText(\"TAB B\"); break; case 2: tab.setText(\"TAB C\"); break; } } }).attach(); }} Ahora ya se muestran los Tabs, con el título y sincronizados con las páginas.PrácticaDesarrolla una app con una sola Activity, que implemente la navegación usando los elementos NavigationView, BottomNavigationView, OptionsMenu y ViewPager2 + TabLayout.Webgrafía: gerardfp.github.io" }, { "title": "Mapear JSON a Java", "url": "/documentacion/posts/mapear-json-a-java/", "categories": "Java, json", "tags": "java, json", "date": "2022-06-08 07:12:00 +0200", "snippet": "Mapear JSON a JavaEl formato de datos JSON se basa en dos estructuras: Objetos: son una colección de pares clave/valor, y van entre llaves { } Arrays: son una lista de valores, y van en...", "content": "Mapear JSON a JavaEl formato de datos JSON se basa en dos estructuras: Objetos: son una colección de pares clave/valor, y van entre llaves { } Arrays: son una lista de valores, y van entre corchetes [ ] ObjetosPara mapear un objeto JSON a Java, se debe definir una clase que contenga los campos equivalentes a las claves del objeto JSON, y el tipo de estos campos debe ser del mismo tipo que los valores del objeto JSON.El nombre de la clase puede ser cualquiera (a veces es difícil pensar qué nombre poner), pero el nombre de los campos debe coincidir con las claves del objeto JSON.{ \"nombre\": \"Juan\", \"edad\": 18, \"nota\": 7.75, \"matriculado\": true}class Estudiante { String nombre; int edad; float nota; boolean matriculado;}También es posible que el valor de una clave JSON sea otro objeto. En este caso, se deberán crear una clase por cada tipo de objeto:{ \"nombre\": \"Juan\", \"ciclo\" : { \"titulo\": \"DAM\", \"curso\": 2 }}class Estudiante { String nombre; CicloFormativo ciclo;}class CicloFormativo { String titulo; int curso;}ArraysPara mapear listas JSON a Java, se debe crear una List con el tipo adecuado a los elementos de la lista JSON:[ \"SMX\", \"DAM\", \"ASIX\", \"DAW\" ]List&lt;String&gt;Con otro tipo de datos es igual:[ 4, 13, 22, 35 ]List&lt;Integer&gt;El valor de una clave de un objeto JSON, puede ser una lista:{ \"notas\": [ 6.5, 7.75, 4.1, 9.95 ]}class Boletin { List&lt;Integer&gt; notas;}Los elementos de una lista pueden ser objetos (todos tienen que ser de la misma clase):{ \"estudiantes\": [ { \"nombre\": \"juan\" }, { \"nombre\": \"luis\" }, { \"nombre\": \"paco\" } ]}class Curso { List&lt;Estudiante&gt; estudiantes;}class Estudiante { String nombre;}Webgrafía: gerardfp.github.io" }, { "title": "Documentación Velneo", "url": "/documentacion/posts/velneo/", "categories": "Velneo", "tags": "velneo", "date": "2022-06-07 04:55:00 +0200", "snippet": "Documentación VelneovModApachevModApache es un módulo para Apache que nos permite servir vía web objetos e instancias de un proyecto de Velneo.Como funciona vModApache Al iniciar el servidor w...", "content": "Documentación VelneovModApachevModApache es un módulo para Apache que nos permite servir vía web objetos e instancias de un proyecto de Velneo.Como funciona vModApache Al iniciar el servidor web Apache se inicia el módulo, el cual conecta con el/los Velneo vServer. Un navegador (IExplorer, Mozilla, etc.) hace una petición al servidor web de Apache. Dependiendo de la url, el módulo Velneo vModApache procesa esa petición (según lo que hayamos especificado en la configuración del servidor web Apache). Si la petición no la procesa el módulo, se la pasa a Apache. El módulo Velneo vModApache devuelve la salida, ya sea el resultado de un proceso (página web) o una imagen al servidor web Apache. El servidor web Apache envía la salida al navegador. Como instalar vModApacheEn este caso vamos a estar instalando en Windows, pero se puede hacer en cualquier sistema UNIX sin ningún problema.Podemos descargar vModApache desde la web de Velneo. Tenemos que descargar el módulo en la máquina donde vayamos a instalar el servidor de Apache.Para poder utilizar vModApache con Apache, tenemos que tener instalada una versión superior a la 2.4.X de Apache con soporte OpenSSL 1.1 (la versión mínima que lo soporta es la 2.4.39).Podemos instalar Apache de muchas formas, en este caso para hacer pruebas vamos a utilizar XAMPP. Instalar este programa es algo trivial así que no entro en mas detalles. Simplemente aclarar que es un cliente gráfico que nos permite lanzar de forma sencilla servicios web como Apache, MariaDB, etc…Una vez tenemos instalado Apache, tenemos que cargar el módulo vModApache que se llama mod_velneo.so. Tenemos que colocar este archivo en el path donde tengamos instalado Velneo directamente (C:\\Archivos de programa\\Velneo).Una vez esté el módulo en el path correcto, lo tenemos que cargar en la config de Apache (httpd.conf)# Cargar modulo vModApacheLoadModule velneo_module \"C:/Archivos de programa/Velneo/mod_velneo.so\"Una vez cargado el módulo tenemos que configurar las directivas de location para el servicio de páginas de Velneo.Una vez mas dentro de httpd.conf:# Config vERP2 api&lt;Location /verp-api&gt; Header set Access-Control-Allow-Methods \"POST, GET, OPTIONS, PUT, DELETE\" Header set Access-Control-Allow-Origin \"*\" Header set Access-Control-Allow-Headers \"Content-Type, api_key, Authorization\" setHandler velneo Vrl vatps://velneo:MarioDM2022@c8.velneo.com:21540/VERP_2_APP&lt;/Location&gt; verp-api es la dirección web base dónde se montará el proyecto Velneo. Header set Access-Control-Allow-* son los permisos para los encabezado CORS que sobre todo Swagger neceistará. setHandler es la directiva de Apache que establece el nombre del manejador. Este parámetro debe ser siempre la constante velneo Vrl es dónde se indicará la VRL del servidor, el usuario, la contraseña y el identificador de la instancia que va a ser atacada vía web. Si el servidor con el que nos conectamos no tiene activado el protocolo VATPS en al Vrl especificaremos “vatp://” si lo tiene, tendemos que especificar “vatps://”.Si el usuario especificado no tiene contraseña, no se incluirá dicho parámetro, pero sí los dos puntos: …usuario:@SERVIDOR…Una vez acabado esto, ya podemos probar entrando en la siguiente url:http://localhost/verp-api/proceso-de-ejemplo.proProgramar en Velneo:Estas son algunas consultas programadas sobre la template vERP de Velneo pensadas para ser consumidas desde API.MUY IMPORTANTE que en el parámetro de Estilos del proceso tengamos puesto que es Accesible web. Si no será imposible llamar a eso proceso desde la API.Consultas de ejemploPrueba:Set dato de retorno ( \"Hello World!\" )Hello World!Conseguir todos los almacenes:Set ( CONTENT_TYPE, \"application/json; charset=utf-8\" )Cargar lista ( ALM_M@vERP_2_dat, ID, , , , )\tGenerar JSON desde lista ( , JSON, OK, ERROR )\tSet dato de retorno ( JSON )[ { \"ALT_TIM\": \"2022-05-25T09:20:41\", \"ALT_USR\": 0, \"ENT\": 4, \"ID\": \"1\", \"MOD_TIM\": \"2022-05-25T09:20:41\", \"MOD_USR\": 0, \"NAME\": \"Almacén Ejemplo\", \"OFF\": false, \"OFF_TIM\": \"\", \"OFF_USR\": 0 }\t...]Conseguir todos los almacenes pero solo mostar nombre + id:Set ( CONTENT_TYPE, \"application/json; charset=utf-8\" )Cargar lista ( ALM_M@vERP_2_dat, ID, , , , )\tGenerar JSON desde lista ( \"\" + #ID:getID() + \",\" + #NAME:getID(), JSON, OK, ERROR )\tSet dato de retorno ( JSON )[ { \"ID\": \"1\", \"NAME\": \"Almacén Ejemplo\" }, { \"ID\": \"2\", \"NAME\": \"Almacen de ejemplo 1\" }, { \"ID\": \"3\", \"NAME\": \"Almacen de ejemplo 2\" }]Conseguir presupuestos de ventas:Set ( CONTENT_TYPE, \"application/json; charset=utf-8\" )Cargar lista ( VTA_PRE_G@vERP_2_dat, ID, , , , )\tGenerar JSON desde lista ( , JSON, OK, ERROR )\tSet dato de retorno ( JSON )[ { \"ALT_TIM\": \"2022-05-27T10:24:21\", \"ALT_USR\": 1, \"APL_REQ\": false, \"APL_RET_ALQ\": false, \"APL_RET_IRP\": false, \"BAS_ESP\": 0, \"BAS_ESP_DTO\": 0, \"BAS_ESP_PDT\": 0, \"BAS_EXE\": 0, \"BAS_EXE_DTO\": 0, \"BAS_EXE_PDT\": 0, \"BAS_GEN\": 100, \"BAS_GEN_DTO\": 100, \"BAS_GEN_PDT\": 100, \"BAS_RED\": 0, \"BAS_RED_DTO\": 0, \"BAS_RED_PDT\": 0, \"BAS_RET_ALQ\": 0, \"BAS_RET_IRP\": 0, \"BAS_SUP\": 0, \"BAS_SUP_DTO\": 0, \"BAS_SUP_PDT\": 0, \"BAS_TOT\": 100, \"BAS_TOT_DTO\": 100, \"BAS_TOT_PDT\": 100, \"CLT\": 2, \"CMR\": 1, \"CND\": \"\", \"CTT\": 0, \"DIR_ENV\": 0, \"EJE\": 2022, \"EMP\": \"1\", \"EMP_DIV\": \"1\", \"EST\": \"P\", \"FCH\": \"2022-05-27\", \"FCH_ACE\": \"\", \"FCH_RCH\": \"\", \"FCH_VAL\": \"2022-06-26\", \"FPG\": 1, \"ID\": 1, \"IMP_DTO\": 0, \"IVA_ESP\": 0, \"IVA_GEN\": 21, \"IVA_RED\": 0, \"IVA_SUP\": 0, \"IVA_TOT\": 21, \"MES\": 5, \"MOD_TIM\": \"2022-05-27T10:26:53\", \"MOD_USR\": 1, \"NO_IMP_TOT\": false, \"NUM_DOC\": 1, \"NUM_LIN_ACE\": 0, \"NUM_LIN_TOT\": 1, \"NUM_PRE\": \"VTA/22-000001\", \"OBS\": \"\", \"OFF\": false, \"OFF_TIM\": \"\", \"OFF_USR\": 0, \"POR_DTO\": 0, \"POR_IVA_ESP\": 2, \"POR_IVA_GEN\": 21, \"POR_IVA_RED\": 10, \"POR_IVA_SUP\": 4, \"POR_REQ_ESP\": 0, \"POR_REQ_GEN\": 0, \"POR_REQ_RED\": 0, \"POR_REQ_SUP\": 0, \"POR_RET_ALQ\": 0, \"POR_RET_IRP\": 0, \"POT\": 0, \"REQ_ESP\": 0, \"REQ_GEN\": 0, \"REQ_RED\": 0, \"REQ_SUP\": 0, \"REQ_TOT\": 0, \"RET_ALQ\": 0, \"RET_IRP\": 0, \"SER\": 2, \"SER_CNT\": 1, \"TOT_PRE\": 121 }]Conseguir pedidos de ventas:Set ( CONTENT_TYPE, \"application/json; charset=utf-8\" )Cargar lista ( VTA_PED_G@vERP_2_dat, ID, , , , )\tOrdenar lista ( #BAS_GEN, , , , , )\tGenerar JSON desde lista ( , JSON, OK, ERROR )\tSet dato de retorno ( JSON )[ { \"ALM\": \"1\", \"ALT\": 0, \"ALT_TIM\": \"2022-05-27T10:36:46\", \"ALT_USR\": 1, \"APL_REQ\": false, \"APL_RET_ALQ\": false, \"APL_RET_IRP\": false, \"BAS_ESP\": 0, \"BAS_ESP_DTO\": 0, \"BAS_ESP_PDT\": 0, \"BAS_EXE\": 0, \"BAS_EXE_DTO\": 0, \"BAS_EXE_PDT\": 0, \"BAS_GEN\": 0, \"BAS_GEN_DTO\": 0, \"BAS_GEN_PDT\": 0, \"BAS_RED\": 0, \"BAS_RED_DTO\": 0, \"BAS_RED_PDT\": 0, \"BAS_RET_ALQ\": 0, \"BAS_RET_IRP\": 0, \"BAS_SUP\": 0, \"BAS_SUP_DTO\": 0, \"BAS_SUP_PDT\": 0, \"BAS_TOT\": 0, \"BAS_TOT_DTO\": 0, \"BAS_TOT_PDT\": 0, \"CLT\": 2, \"CMR\": 1, \"CND\": \"\", \"CTT\": 0, \"DIR_ENV\": 0, \"EJE\": 2022, \"EMP\": \"1\", \"EMP_DIV\": \"1\", \"EST\": \"P\", \"FCH\": \"2022-05-27\", \"FCH_ENT\": \"2022-06-02\", \"FIR_BAS_64\": \"\", \"FPG\": 1, \"ID\": 1, \"IMP_DTO\": 0, \"IMP_PDT\": 0, \"IVA_ESP\": 0, \"IVA_GEN\": 0, \"IVA_RED\": 0, \"IVA_SUP\": 0, \"IVA_TOT\": 0, \"LAT\": 0, \"LON\": 0, \"MES\": 5, \"MOD_TIM\": \"2022-05-27T10:36:46\", \"MOD_USR\": 1, \"NUM_DOC\": 1, \"NUM_LIN_SRV\": 0, \"NUM_LIN_TOT\": 0, \"NUM_PED\": \"VTA/22-000001\", \"OBS\": \"\", \"OFF\": false, \"OFF_TIM\": \"\", \"OFF_USR\": 0, \"POR_DTO\": 0, \"POR_IVA_ESP\": 2, \"POR_IVA_GEN\": 21, \"POR_IVA_RED\": 10, \"POR_IVA_SUP\": 4, \"POR_REQ_ESP\": 0, \"POR_REQ_GEN\": 0, \"POR_REQ_RED\": 0, \"POR_REQ_SUP\": 0, \"POR_RET_ALQ\": 0, \"POR_RET_IRP\": 0, \"POT\": 0, \"REQ_ESP\": 0, \"REQ_GEN\": 0, \"REQ_RED\": 0, \"REQ_SUP\": 0, \"REQ_TOT\": 0, \"RET_ALQ\": 0, \"RET_IRP\": 0, \"SER\": 2, \"SER_CNT\": 1, \"TOT_PED\": 0 }, ...]Conseguir clientes:Set ( CONTENT_TYPE, \"application/json; charset=utf-8\" )Cargar lista ( ENT_M@vERP_2_dat, ID, , , , )\tOrdenar lista ( , , , , , )\tFiltrar lista ( #ES_CLT ! \"false\", )\tGenerar JSON desde lista ( , JSON, OK, ERROR )\tSet dato de retorno ( JSON )[ { \"ALI\": \"\", \"ALT_TIM\": \"2022-05-25T09:20:41\", \"ALT_USR\": 0, \"APE_1\": \"\", \"APE_2\": \"\", \"APL_RET_IRP\": false, \"AUX_BCO_PAG\": \"\", \"AUX_CLT\": \"\", \"AUX_PRV\": \"\", \"BCO_BIC\": \"\", \"BCO_CTA\": \"\", \"BCO_CTA_COM\": \"\", \"BCO_DC\": \"\", \"BCO_ENT\": \"\", \"BCO_IBA\": \"\", \"BCO_OFI\": \"\", \"BCO_SUF\": 0, \"CIF\": \"A12345674\", \"CMR\": 1, \"CPS\": \"\", \"CTT_EML_PRI_ID\": 0, \"CTT_FAX_PRI_ID\": 0, \"CTT_TLF_PRI_ID\": 0, \"DATOS_COMERCIALES____________________\": 0, \"DATOS_CONTACTO____________________\": 0, \"DATOS_FISCALES____________________\": 0, \"DIA_PAG_1\": 0, \"DIA_PAG_2\": 0, \"DIA_PAG_3\": 0, \"DIR\": \"\", \"DIR_PRI_ID\": 0, \"EML\": \"\", \"EMP\": \"\", \"EMP_DIV\": \"\", \"ENT_REL\": 0, \"ENT_REL_NAME\": \"\", \"ES_ALM\": false, \"ES_CLT\": true, \"ES_CMR\": false, \"ES_EMP\": false, \"ES_PRE_CLT\": false, \"ES_PRV\": false, \"ES_TRA\": false, \"EXE_IVA\": false, \"FCH_FIR_MDT\": \"\", \"FPG_CLT\": 0, \"FPG_PRV\": 0, \"ID\": 2, \"IDI\": 1, \"LOC\": \"\", \"MIN\": false, \"MOD_TIM\": \"2022-05-25T09:20:41\", \"MOD_USR\": 0, \"MON\": 0, \"NAME\": \"Cliente Ejemplo\", \"NOM\": \"\", \"NOM_COM\": \"Cliente Ejemplo\", \"NOM_ENT_REL\": \"Cliente Ejemplo\\n\", \"NOM_FIS\": \"Cliente Ejemplo\", \"NO_AGR_ALB\": false, \"NO_PAG_DES_DIA\": 0, \"NO_PAG_DES_MES\": 0, \"NO_PAG_HAS_DIA\": 0, \"NO_PAG_HAS_MES\": 0, \"OBS\": \"\", \"OFF\": false, \"PAI\": 1, \"PGC_BCO_PAG\": \"\", \"PGC_CLT\": \"\", \"PGC_PRV\": \"\", \"POR_IVA_ESP\": 0, \"POR_RET\": 0, \"PRO\": 0, \"PWD_WEB\": \"\", \"REG_IVA\": \"\", \"REM_NOR_MDT\": 0, \"SER_COM\": 0, \"SER_COM_CON\": 0, \"SER_VTA\": 0, \"SER_VTA_CON\": 0, \"TIPO____________________\": 0, \"TLF\": \"\", \"TRT\": \"\", \"USR_WEB\": \"\", \"VTA_TAR\": 0 }, ...]Conseguir proveedores:Set ( CONTENT_TYPE, \"application/json; charset=utf-8\" )Cargar lista ( ENT_M@vERP_2_dat, ID, , , , )\tOrdenar lista ( , , , , , )\tFiltrar lista ( #ES_PRV ! \"false\", )\tGenerar JSON desde lista ( , JSON, OK, ERROR )\tSet dato de retorno ( JSON )[ { \"ALI\": \"\", \"ALT_TIM\": \"2022-05-25T09:20:41\", \"ALT_USR\": 0, \"APE_1\": \"\", \"APE_2\": \"\", \"APL_RET_IRP\": false, \"AUX_BCO_PAG\": \"\", \"AUX_CLT\": \"\", \"AUX_PRV\": \"\", \"BCO_BIC\": \"\", \"BCO_CTA\": \"\", \"BCO_CTA_COM\": \"\", \"BCO_DC\": \"\", \"BCO_ENT\": \"\", \"BCO_IBA\": \"\", \"BCO_OFI\": \"\", \"BCO_SUF\": 0, \"CIF\": \"B12345674\", \"CMR\": 0, \"CPS\": \"\", \"CTT_EML_PRI_ID\": 0, \"CTT_FAX_PRI_ID\": 0, \"CTT_TLF_PRI_ID\": 0, \"DATOS_COMERCIALES____________________\": 0, \"DATOS_CONTACTO____________________\": 0, \"DATOS_FISCALES____________________\": 0, \"DIA_PAG_1\": 0, \"DIA_PAG_2\": 0, \"DIA_PAG_3\": 0, \"DIR\": \"\", \"DIR_PRI_ID\": 0, \"EML\": \"\", \"EMP\": \"\", \"EMP_DIV\": \"\", \"ENT_REL\": 0, \"ENT_REL_NAME\": \"\", \"ES_ALM\": false, \"ES_CLT\": false, \"ES_CMR\": false, \"ES_EMP\": false, \"ES_PRE_CLT\": false, \"ES_PRV\": true, \"ES_TRA\": false, \"EXE_IVA\": false, \"FCH_FIR_MDT\": \"\", \"FPG_CLT\": 0, \"FPG_PRV\": 0, \"ID\": 3, \"IDI\": 1, \"LOC\": \"\", \"MIN\": false, \"MOD_TIM\": \"2022-05-25T09:20:41\", \"MOD_USR\": 0, \"MON\": 0, \"NAME\": \"Proveedor Ejemplo\", \"NOM\": \"\", \"NOM_COM\": \"Proveedor Ejemplo\", \"NOM_ENT_REL\": \"Proveedor Ejemplo\\n\", \"NOM_FIS\": \"Proveedor Ejemplo\", \"NO_AGR_ALB\": false, \"NO_PAG_DES_DIA\": 0, \"NO_PAG_DES_MES\": 0, \"NO_PAG_HAS_DIA\": 0, \"NO_PAG_HAS_MES\": 0, \"OBS\": \"\", \"OFF\": false, \"PAI\": 1, \"PGC_BCO_PAG\": \"\", \"PGC_CLT\": \"\", \"PGC_PRV\": \"\", \"POR_IVA_ESP\": 0, \"POR_RET\": 0, \"PRO\": 0, \"PWD_WEB\": \"\", \"REG_IVA\": \"\", \"REM_NOR_MDT\": 0, \"SER_COM\": 0, \"SER_COM_CON\": 0, \"SER_VTA\": 0, \"SER_VTA_CON\": 0, \"TIPO____________________\": 0, \"TLF\": \"\", \"TRT\": \"\", \"USR_WEB\": \"\", \"VTA_TAR\": 0 }, ...]Conseguir bancos:Set ( CONTENT_TYPE, \"application/json; charset=utf-8\" )Cargar lista ( BCO_C@vERP_2_dat, ID, , , , )\tOrdenar lista ( , , , , , )\tGenerar JSON desde lista ( , JSON, OK, ERROR )\tSet dato de retorno ( JSON )[ { \"COD_ENT\": \"0003\", \"COD_SWF\": \"BDEPESM1XXX\", \"ID\": \"0003\", \"NAME\": \"BANCO DE DEPOSITOS\", \"OFF\": false, \"VER_ULT_ACT\": \"20.0\" }, { \"COD_ENT\": \"0004\", \"COD_SWF\": \"BANDESSSXXX\", \"ID\": \"0004\", \"NAME\": \"BANCO DE ANDALUCIA\", \"OFF\": false, \"VER_ULT_ACT\": \"20.0\" }, ...]Conseguir empresas del usuario:Set ( CONTENT_TYPE, \"application/json; charset=utf-8\" )Cargar lista ( EMP_USR_M@vERP_2_dat, EMP, , , , )\tOrdenar lista ( , , , , , )\tGenerar JSON desde lista ( , JSON, OK, ERROR )\tSet dato de retorno ( JSON )[ { \"ALT_TIM\": \"2022-05-25T09:20:41\", \"ALT_USR\": 1, \"EMP\": \"1\", \"MOD_TIM\": \"2022-06-02T09:53:31\", \"MOD_USR\": 1, \"OFF\": false, \"OFF_TIM\": \"\", \"OFF_USR\": 0, \"ULT_ACS\": \"2022-06-02\", \"USR\": 1 }]Conseguir empresas:Set ( CONTENT_TYPE, \"application/json; charset=utf-8\" )Cargar lista ( EMP_M@vERP_2_dat, ID, , , , )\tOrdenar lista ( , , , , , )\tGenerar JSON desde lista ( , JSON, OK, ERROR )\tSet dato de retorno ( JSON )[ { \"AGB_ACC_ID\": 0, \"AGB_MUL_EMP\": false, \"AGB_SRV_KEY\": \"\", \"AGB_URL_FIC\": \"\", \"AGB_URL_MOV\": \"\", \"AGREGADOR_BANCARIO______________________________1\": 0, \"ALM\": \"1\", \"ALMACEN______________________________\": 0, \"ALM_TPV\": \"\", \"ALT_TIM\": \"2022-05-25T09:20:41\", \"ALT_USR\": 0, \"API_KEY_W\": 0, \"AUDITORIA______________________________\": 0, \"AUX_BCO_PAG\": \"\", \"AUX_COM\": \"1\", \"AUX_COM_IVA_ESP\": \"4\", \"AUX_COM_IVA_GEN\": \"1\", \"AUX_COM_IVA_INT\": \"5\", \"AUX_COM_IVA_ISP_ESP\": \"\", \"AUX_COM_IVA_ISP_GEN\": \"\", \"AUX_COM_IVA_ISP_RED\": \"\", \"AUX_COM_IVA_ISP_SUP\": \"\", \"AUX_COM_IVA_RED\": \"2\", \"AUX_COM_IVA_SUP\": \"3\", \"AUX_COM_REQ_ESP\": \"4\", \"AUX_COM_REQ_GEN\": \"1\", \"AUX_COM_REQ_RED\": \"2\", \"AUX_COM_REQ_SUP\": \"3\", \"AUX_COM_RET_ALQ\": \"1\", \"AUX_COM_RET_IRP\": \"1\", \"AUX_DIF_CHG_NEG\": \"\", \"AUX_DIF_CHG_POS\": \"\", \"AUX_VTA\": \"1\", \"AUX_VTA_IVA_ESP\": \"4\", \"AUX_VTA_IVA_GEN\": \"1\", \"AUX_VTA_IVA_INT\": \"5\", \"AUX_VTA_IVA_ISP_ESP\": \"\", \"AUX_VTA_IVA_ISP_GEN\": \"\", \"AUX_VTA_IVA_ISP_RED\": \"\", \"AUX_VTA_IVA_ISP_SUP\": \"\", \"AUX_VTA_IVA_RED\": \"2\", \"AUX_VTA_IVA_SUP\": \"3\", \"AUX_VTA_REQ_ESP\": \"4\", \"AUX_VTA_REQ_GEN\": \"1\", \"AUX_VTA_REQ_RED\": \"2\", \"AUX_VTA_REQ_SUP\": \"3\", \"AUX_VTA_RET_ALQ\": \"1\", \"AUX_VTA_RET_IRP\": \"1\", \"CHQ_DEV_COD_BAR\": \"\", \"CLT_TPV\": 0, \"COB_PAG_AUX_1\": \"\", \"COB_PAG_AUX_2\": \"\", \"COB_PAG_AUX_3\": \"\", \"COB_PAG_AUX_4\": \"\", \"COB_PAG_AUX_5\": \"\", \"COB_PAG_AUX_6\": \"\", \"COB_PAG_AUX_IVA\": \"\", \"COB_PAG_PGC_1\": \"\", \"COB_PAG_PGC_2\": \"\", \"COB_PAG_PGC_3\": \"\", \"COB_PAG_PGC_4\": \"\", \"COB_PAG_PGC_5\": \"\", \"COB_PAG_PGC_6\": \"\", \"COB_PAG_PGC_IVA\": \"\", \"COB_PAG_REG_IVA_1\": \"\", \"COB_PAG_REG_IVA_2\": \"\", \"COB_PAG_REG_IVA_3\": \"\", \"COB_PAG_REG_IVA_4\": \"\", \"COB_PAG_REG_IVA_5\": \"\", \"COB_PAG_REG_IVA_6\": \"\", \"COB_PAG_SER_FAC_REC\": 0, \"COB_PAG_TXT_1\": \"\", \"COB_PAG_TXT_2\": \"\", \"COB_PAG_TXT_3\": \"\", \"COB_PAG_TXT_4\": \"\", \"COB_PAG_TXT_5\": \"\", \"COB_PAG_TXT_6\": \"\", \"COMPRAS______________________________\": 0, \"COM_FAC_PED\": true, \"CONTABILIDAD______________________________\": 0, \"CON_VTO_VEN_NO\": false, \"CTA_IBA\": false, \"CTA_IBA_DIG\": 0, \"DEC_CAN\": 2, \"DEC_IMP\": 2, \"DEC_PRE\": 2, \"DIA_PAG_1\": 0, \"DIA_PAG_2\": 0, \"DIA_PAG_3\": 0, \"DIR_FMT_SIM\": true, \"DOC_AWS_ACC_KEY_ID\": \"\", \"DOC_AWS_ACC_SEC\": \"\", \"DOC_AWS_BUC_NAM\": \"\", \"DOC_DRO_ACC_TOK\": \"\", \"DOC_DRO_APP_ID\": \"\", \"DOC_DRO_APP_SEC\": \"\", \"DOC_DRO_AUT_COD\": \"\", \"DOC_DRO_REF_TOK\": \"\", \"DOC_DRO_ULT_TOK\": \"\", \"DOC_GOO_AUT_REF_TOK\": \"\", \"DOC_GOO_AUT_TOK\": \"\", \"DOC_G_DRI_AUT_COD\": \"\", \"DOC_G_DRI_AUT_REF_TOK\": \"\", \"DOC_G_DRI_AUT_TOK\": \"\", \"DOC_G_DRI_CLI_ID\": \"\", \"DOC_G_DRI_CLI_SEC\": \"\", \"DOC_G_DRI_ID_CAR\": \"\", \"DOC_PLA\": \"A\", \"EMP\": \"1\", \"ENT\": 5, \"ENT_REL_TIP\": 1, \"ES_EMP\": true, \"EXT_CON_ORD_INV\": false, \"FAC_SIM_CAB\": \"\", \"FAC_SIM_PIE\": \"\", \"FCH_CHG_IVA\": \"2022-01-01\", \"FCH_CHG_RET_ALQ\": \"2022-01-01\", \"FCH_CHG_RET_IRP\": \"2022-01-01\", \"FCH_CON_DES\": \"2022-01-01\", \"FCH_CON_HAS\": \"2022-12-31\", \"FCH_IVA_DES\": \"2022-01-01\", \"FCH_IVA_HAS\": \"2022-12-31\", \"FPG_COM\": 1, \"FPG_TPV_CHQ_DEV\": 0, \"FPG_TPV_CON\": 0, \"FPG_TPV_MUL\": 0, \"FPG_TPV_TAJ\": 0, \"FPG_VTA\": 1, \"GENERAL______________________________\": 0, \"GESTION_DOCUMENTAL______________________________\": 0, \"ID\": \"1\", \"MES_APE\": 1, \"MES_CIE\": 12, \"MODULO_WEB_API____________________________________\": 0, \"MOD_COB\": false, \"MOD_CON\": false, \"MOD_COS\": false, \"MOD_PAG\": false, \"MOD_TIM\": \"2022-05-25T09:20:41\", \"MOD_USR\": 0, \"MON\": 0, \"MON_SIM\": \"€\", \"NAME\": \"Empresa Ejemplo\", \"NO_PAG_DES_DIA\": 0, \"NO_PAG_DES_MES\": 0, \"NO_PAG_HAS_DIA\": 0, \"NO_PAG_HAS_MES\": 0, \"NO_STK\": false, \"NUM_AUX\": \"\", \"NUM_COM_ALB\": \"\", \"NUM_COM_FAC\": \"\", \"NUM_COM_PED\": \"\", \"NUM_CTA_AUX\": \"\", \"NUM_DIA_CAD_CHQ_DEV\": 0, \"NUM_REG_CAL_SAL_4P\": 0, \"NUM_USR_CON\": 0, \"NUM_USR_MAX\": 0, \"NUM_VTA_ALB\": \"\", \"NUM_VTA_FAC\": \"\", \"NUM_VTA_PED\": \"\", \"NUM_VTA_PRE\": \"\", \"OFF\": false, \"OFF_TIM\": \"\", \"OFF_USR\": 0, \"PAI\": 1, \"PGC_BCO\": \"\", \"PGC_BCO_PAG\": \"\", \"PGC_CLT\": \"4300\", \"PGC_COM\": \"600\", \"PGC_COM_IVA_ESP\": \"472\", \"PGC_COM_IVA_GEN\": \"472\", \"PGC_COM_IVA_INT\": \"472\", \"PGC_COM_IVA_ISP_ESP\": \"\", \"PGC_COM_IVA_ISP_GEN\": \"\", \"PGC_COM_IVA_ISP_RED\": \"\", \"PGC_COM_IVA_ISP_SUP\": \"\", \"PGC_COM_IVA_RED\": \"472\", \"PGC_COM_IVA_SUP\": \"472\", \"PGC_COM_REQ_ESP\": \"4721\", \"PGC_COM_REQ_GEN\": \"4721\", \"PGC_COM_REQ_RED\": \"4721\", \"PGC_COM_REQ_SUP\": \"4721\", \"PGC_COM_RET_ALQ\": \"4733\", \"PGC_COM_RET_IRP\": \"4731\", \"PGC_DIF_CHG_NEG\": \"\", \"PGC_DIF_CHG_POS\": \"\", \"PGC_PRV\": \"4100\", \"PGC_VTA\": \"700\", \"PGC_VTA_IVA_ESP\": \"477\", \"PGC_VTA_IVA_GEN\": \"477\", \"PGC_VTA_IVA_INT\": \"477\", \"PGC_VTA_IVA_ISP_ESP\": \"\", \"PGC_VTA_IVA_ISP_GEN\": \"\", \"PGC_VTA_IVA_ISP_RED\": \"\", \"PGC_VTA_IVA_ISP_SUP\": \"\", \"PGC_VTA_IVA_RED\": \"477\", \"PGC_VTA_IVA_SUP\": \"477\", \"PGC_VTA_REQ_ESP\": \"4771\", \"PGC_VTA_REQ_GEN\": \"4771\", \"PGC_VTA_REQ_RED\": \"4771\", \"PGC_VTA_REQ_SUP\": \"4771\", \"PGC_VTA_RET_ALQ\": \"4753\", \"PGC_VTA_RET_IRP\": \"4751\", \"PIE_INF_1\": \"\", \"PIE_INF_2\": \"\", \"POR_IVA_ESP\": 2, \"POR_IVA_ESP_ANT\": 2, \"POR_IVA_GEN\": 21, \"POR_IVA_GEN_ANT\": 21, \"POR_IVA_RED\": 10, \"POR_IVA_RED_ANT\": 10, \"POR_IVA_SUP\": 4, \"POR_IVA_SUP_ANT\": 4, \"POR_REQ_ESP\": 0.75, \"POR_REQ_ESP_ANT\": 0.75, \"POR_REQ_GEN\": 5.2, \"POR_REQ_GEN_ANT\": 5.2, \"POR_REQ_RED\": 1.4, \"POR_REQ_RED_ANT\": 1.4, \"POR_REQ_SUP\": 0.5, \"POR_REQ_SUP_ANT\": 0.5, \"POR_RET_ALQ\": 19, \"POR_RET_ALQ_ANT\": 21, \"POR_RET_IRP\": 15, \"POR_RET_IRP_ANT\": 19, \"PRE_FAC\": false, \"PRE_VAL_DIA\": 30, \"PVP_IVA_INC\": false, \"REG_IVA_COM\": \"G\", \"REG_IVA_VTA\": \"G\", \"REL_TIP\": 1, \"SER_COM\": 1, \"SER_COM_CON\": 1, \"SER_TPV\": 0, \"SER_VTA\": 2, \"SER_VTA_CON\": 2, \"SND_MOD_TRI\": \"\", \"TEM\": \"\", \"TEM_COM\": \"\", \"TESORERIA______________________________\": 0, \"TPV_VTA_FAC_GEN\": false, \"TPV______________________________\": 0, \"TRIBUTOS______________________________\": 0, \"URL_API_WEB\": \"\", \"USA_TER\": false, \"VENTAS______________________________\": 0, \"VER_DOC_SIM\": false, \"VER_ENT_SIM\": false, \"VER_REF_ART\": false, \"VRF_APU\": \"\", \"VRF_APU_NUM_ERR\": 0, \"VRF_APU_TIM\": \"\", \"VRF_ASI\": \"\", \"VRF_ASI_NUM_ERR\": 0, \"VRF_ASI_TIM\": \"\", \"VRF_AUX_CLT_SAL\": \"\", \"VRF_AUX_CLT_SAL_NUM_ERR\": 0, \"VRF_AUX_CLT_SAL_TIM\": \"\", \"VRF_AUX_PRV_SAL\": \"\", \"VRF_AUX_PRV_SAL_NUM_ERR\": 0, \"VRF_AUX_PRV_SAL_TIM\": \"\", \"VRF_COM_FAC\": \"\", \"VRF_COM_FAC_NUM_ERR\": 0, \"VRF_COM_FAC_TIM\": \"\", \"VRF_VTA_FAC\": \"\", \"VRF_VTA_FAC_NUM_ERR\": 0, \"VRF_VTA_FAC_TIM\": \"\", \"VTA_FAC_PED\": true, \"VTA_MOV_LIN_DSC_FRT\": \"\", \"VTA_PED_LIN_DSC_FRT\": \"\", \"VTA_PRE_LIN_DSC_FRT\": \"\", \"VTO_COB_GEN_AUT\": true, \"VTO_PAG_GEN_AUT\": true }]Conseguir usuarios:Set ( CONTENT_TYPE, \"application/json; charset=utf-8\" )Cargar lista ( USR_M@vERP_2_dat, ENT, , , , )\tOrdenar lista ( , , , , , )\tGenerar JSON desde lista ( , JSON, OK, ERROR )\tSet dato de retorno ( JSON )[ { \"ALT_TIM\": \"2022-05-25T09:20:41\", \"ALT_USR\": 0, \"ASP\": \"2\", \"AYU_VIS\": false, \"EMP\": \"1 \", \"ENT\": 0, \"ES_ADM\": true, \"EXT\": false, \"FCH_ALT\": \"2022-05-25\", \"ID\": 1, \"MOD_TIM\": \"2022-06-02T09:53:31\", \"MOD_USR\": 1, \"NAME\": \"velneo\", \"OFF\": false, \"OFF_TIM\": \"\", \"OFF_USR\": 0, \"PRM\": \"\", \"PWD\": \"\", \"SND_PDF\": \"\", \"TEC_INT_ACE\": false, \"TEM_CLA\": \"AUTOEXEC\", \"TEM_COM_CLA\": \"AUTOEXEC-COMPACTO\", \"TEM_COM_OSC\": \"OSCURO-VISUALMS+VELNEO\", \"TEM_OSC\": \"OSCURO-VISUALMS+VELNEO\", \"VER_DAS_INI\": false }]Conseguir API_KEYS:Set ( CONTENT_TYPE, \"application/json; charset=utf-8\" )Cargar lista ( API_KEY_W@vERP_2_dat, API_KEY, , , , )\tOrdenar lista ( , , , , , )\tGenerar JSON desde lista ( , JSON, OK, ERROR )\tSet dato de retorno ( JSON )[ { \"API_KEY\": \"asd123\", \"DSC\": \"\", \"ID\": 1, \"NAME\": \"api_key\", \"OFF\": false }]Añadir un almacén:Set ( CONTENT_TYPE, \"application/json; charset=utf-8\" )If ( isEmpty(ID) | isEmpty(NAME) )\tSet dato de retorno ( \"ERROR: pasar todos los parámetros\" )Else\tCrear nueva ficha en memoria ( alta, ALM_M@vERP_2_dat )\t\tModificar campo ( ID, ID )\t\tModificar campo ( NAME, NAME )\tAlta de ficha ( alta )\t\tSet dato de retorno ( \"Registro añadido con éxito\" )http://localhost:8090/verp-api/vERP_2_dat_dat/add_alm?id=6&amp;name=Almacen de Ejemplo 6Registro añadido con éxitooERROR: pasar todos los parámetrosEliminar un almacén:Set ( CONTENT_TYPE, \"application/json; charset=utf-8\" )If ( isEmpty(ID) )\tSet dato de retorno ( \"ERROR: pasar todos los parámetros\" )Else\tCargar lista ( ALM_M@vERP_2_dat, ID, , , , )\t\tRem ( Filtrar lista eliminará todos los registros que no matcheen la condición )\t\tFiltrar lista ( #ID = ID, )\t\tRecorrer lista eliminando fichas\t\t\tSet dato de retorno ( \"Registro eliminado con éxito\" )http://localhost:8090/verp-api/vERP_2_dat_dat/rmv_alm?id=4Registro eliminado con éxitooERROR: pasar todos los parámetrosWebgrafía: Documentación de Velneo Canal de youtube de Velneo " }, { "title": "Fragments", "url": "/documentacion/posts/fragments/", "categories": "Android, fragments", "tags": "android, fragments", "date": "2022-06-03 11:25:00 +0200", "snippet": "https://gerardfp.github.io/dam/m8/uf1/fragments/FragmentsEl objetivo de esta práctica es trabajar con Fragments.Un Fragment representa un comportamiento o una parte de la interfaz de usuario en una...", "content": "https://gerardfp.github.io/dam/m8/uf1/fragments/FragmentsEl objetivo de esta práctica es trabajar con Fragments.Un Fragment representa un comportamiento o una parte de la interfaz de usuario en una Activity.Puedes combinar múltiples fragmentos en una sola actividad para crear una IU multipanel y volver a usar un fragmento en múltiples actividades. Puedes pensar en un fragmento como una sección modular de una actividad que tiene su ciclo de vida propio, recibe sus propios eventos de entrada y que puedes agregar o quitar mientras la actividad se esté ejecutando (algo así como una “subactividad” que puedes volver a usar en diferentes actividades).Programaremos un proceso de onboarding para una app:https://github.com/gerardfp/fragmentsVista general del componente NavigationEl componente Navigation consiste en tres partes clave: Navigation Graph (XML resource) - Es un recurso que contiene toda la información relativa a la navegación en un lugar centralizado. Esto incluye todos los lugares de la app, conocidas como destinos, y todos los caminos posibles que un usuario puede tomar en la app NavHostFragment (Layout XML) - Es un widget especial que añades al layout. En él se muestran los diferentes destinos del Grafo de Navegación. NavController (Java object) - Es un objeto que realiza un seguimiento de la posición actual dentro del grafo de navegación. Realiza el intercambio del contenido de destino en el NavHostFragment según el usuario se mueve por el grafo de navegación. Cuando navegas, utilizas el objeto NavController, diciéndole dónde quieres ir o qué camino quieres tomar en Grafo de Navegación. El NavController mostrará el destino apropiado en el NavHostFragment.Crea el proyecto Selecciona Empty Activity como plantilla para la MainActivity Añade las dependencias para incluir el soporte Navigation: build.gradle dependencies {//... implementation \"androidx.navigation:navigation-fragment:2.3.0 implementation \"androidx.navigation:navigation-ui:2.3.0} Puedes añadir las dependencias ahora mismo, o también puedes dejar que sea el propio Android Studio el que las añada automáticamente cuando crees el grafo de navegación en la siguiente sección. Crea el Grafo de NavegaciónSobre la carpeta raiz del proyecto haz clic-derecho y selecciona New &gt; Android Resource FileIntroduce el nombre del fichero del grafo, por ejemplo: nav_graph.En el Resource type selecciona NavigationAñade los fragments al grafo de navegaciónAñadiremos 3 destinos al grafo de navegación. Dos destinos para el Onboarding, y uno que será la pantalla Home de la app.Abre el fichero res/navigation/nav_graph.xml en modo Design, y haz click sobre el icono “New Destination” Haz click en Create new destinationSeleciona Fragment (Blank) como plantilla para el Fragment:Introduce el nombre Onboarding1Fragment:Repite el proceso para crear los fragments Onboarding2Fragment y HomeFragmentEl icono sobre el onboarding1Fragment indica que este es el destino que se mostrará en primer lugar: el Start Destination.Puedes cambiar en cualquier momento el Start Destination seleccionando un destino y clicando en el icono de la barra.Conecta los destinosLa navegación entre destinos se define creando acciones de navegación.Para crear una acción hay que hacer clic sobre el manejador de orgien de un destino y arrastrarlo sobre el siguiente destino:Crea las 2 acciones de navegación: Del onboarding1Fragment al onboarding2Fragment Del onboarding2Fragment al homeFragmentObserva que en el código XML del archivo res/navigation/nav_graph.xml se han añadido las &lt;action&gt; de navegación:res/navigation/nav_graph.xml...&lt;action android:id=\"@+id/action_onboarding1Fragment_to_onboarding2Fragment\" app:destination=\"@id/onboarding2Fragment\"/&gt;...&lt;action android:id=\"@+id/action_onboarding2Fragment_to_homeFragment\" app:destination=\"@id/homeFragment\" /&gt;...Más adelante utilizaremos los identificadores de estas acciones para implementar la navegación.Añade el NavHostEn el layout de la MainActivity (activity_main.xml) añade un &lt;FragmentContainerView&gt; que será el NavHostFragment:res/layout/activity_main.xml&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;&lt;androidx.constraintlayout.widget.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\" xmlns:app=\"http://schemas.android.com/apk/res-auto\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\"&gt; &lt;androidx.fragment.app.FragmentContainerView android:name=\"androidx.navigation.fragment.NavHostFragment\" android:id=\"@+id/nav_host_fragment\" android:layout_width=\"match_parent\" android:layout_height=\"match_parent\" app:defaultNavHost=\"true\" app:navGraph=\"@navigation/nav_graph\" /&gt;&lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;Puedes ver el NavHostFragment como un hueco en el cual se irán poniendo los diferentes destinos según se vaya navegando. Observa que lo hemos enlazado con el grafo de navegación que acabamos de crear mediante el atributo app:navGraph=\"@navigation/nav_graph\"Diseña de las pantallasAñade las imágenesPuedes descargar las imágenes del repositorio del proyecto:onboarding1.svgonboarding2.svgO puedes usar las imágenes que quieras, por ejemplo de unDraw, DrawKit, humaaans, design.ai…Encima del directorio app, haz clic-derecho y selecciona New &gt; Vector AssetSelecciona Asset Type: Local file e introduce la ruta del fichero onboarding1.svg:Repite lo mismo para la imagen onboarding2.svg.Diseña el layoutPor defecto, el layout de los fragments creados contiene un FrameLayout. Este layout está pensado para contener un único child. Cambiémoslo por un ConstraintLayout:Abre el fichero res/layout/fragment_onboarding1.xml en modo Code y sustituye el FrameLayout por un ConstraintLayout:En cada pantalla añadiremos una imagen, un texto y un botón:Para añadir una imagen usamos el widget ImageView. La imagen que se debe mostrar se define en el atributo android:src.Es importante establecer el atributo android:adjustViewBounds a true. Esto hace que los límites (el borde) del ImageView se ajusten al tamaño de la imagen.&lt;ImageViewandroid:layout_width=\"wrap_content\"android:layout_height=\"wrap_content\"android:adjustViewBounds=\"true\"android:src=\"@drawable/ic_onboarding1\"/&gt;También puedes usar el modo Design para añadir la imagen: Añadimos también el TextView y el Button.Modificamos algunos atributos para añadir colores de fondo, paddings, tamaños de letra, etc… También creamos las constraints necesarias y definimos unos identificadores apropiados.El layout fragment_onboarding1.xml queda finalmente así:&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;&lt;androidx.constraintlayout.widget.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"xmlns:app=\"http://schemas.android.com/apk/res-auto\"android:layout_width=\"match_parent\"android:layout_height=\"match_parent\"android:background=\"#4CAF50\"android:padding=\"32dp\"&gt;&lt;ImageView android:id=\"@+id/imagen\" android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\" android:adjustViewBounds=\"true\" android:src=\"@drawable/ic_onboarding1\" app:layout_constraintBottom_toTopOf=\"@+id/texto\" app:layout_constraintTop_toTopOf=\"parent\" app:layout_constraintLeft_toLeftOf=\"parent\" app:layout_constraintRight_toRightOf=\"parent\"/&gt;&lt;TextView android:id=\"@+id/texto\" android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\" android:text=\"!Discover the garlic soup!\" android:textColor=\"#FFFFFF\" android:textSize=\"30sp\" app:layout_constraintBottom_toTopOf=\"@+id/botonSiguiente\" app:layout_constraintTop_toBottomOf=\"@id/imagen\" app:layout_constraintLeft_toLeftOf=\"parent\" app:layout_constraintRight_toRightOf=\"parent\"/&gt;&lt;Button android:id=\"@+id/botonSiguiente\" android:layout_width=\"match_parent\" android:layout_height=\"wrap_content\" android:backgroundTint=\"#FFEB3B\" android:text=\"Next\" app:layout_constraintTop_toBottomOf=\"@id/texto\" app:layout_constraintBottom_toBottomOf=\"parent\" app:layout_constraintLeft_toLeftOf=\"parent\" app:layout_constraintRight_toRightOf=\"parent\" /&gt;&lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;El resultado es este:Para el fragment_onboarding2.xml cambiamos la imagen, el texto y los colores:&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;&lt;androidx.constraintlayout.widget.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"xmlns:app=\"http://schemas.android.com/apk/res-auto\"android:layout_width=\"match_parent\"android:layout_height=\"match_parent\"android:background=\"#00BCD4\"android:padding=\"32dp\"&gt;&lt;ImageView android:id=\"@+id/imagen\" android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\" android:adjustViewBounds=\"true\" android:src=\"@drawable/ic_onboarding2\" app:layout_constraintBottom_toTopOf=\"@+id/texto\" app:layout_constraintLeft_toLeftOf=\"parent\" app:layout_constraintRight_toRightOf=\"parent\" app:layout_constraintTop_toTopOf=\"parent\" /&gt;&lt;TextView android:id=\"@+id/texto\" android:layout_width=\"wrap_content\" android:layout_height=\"wrap_content\" android:text=\"¡Blow and make bottles!\" android:textColor=\"#FFFFFF\" android:textSize=\"30sp\" app:layout_constraintBottom_toTopOf=\"@+id/botonFinalizar\" app:layout_constraintLeft_toLeftOf=\"parent\" app:layout_constraintRight_toRightOf=\"parent\" app:layout_constraintTop_toBottomOf=\"@id/imagen\" /&gt;&lt;Button android:id=\"@+id/botonFinalizar\" android:layout_width=\"match_parent\" android:layout_height=\"wrap_content\" android:backgroundTint=\"#FFC107\" android:text=\"Finish\" app:layout_constraintBottom_toBottomOf=\"parent\" app:layout_constraintLeft_toLeftOf=\"parent\" app:layout_constraintRight_toRightOf=\"parent\" app:layout_constraintTop_toBottomOf=\"@id/texto\" /&gt;&lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;El diseño de la pantalla Home la obviamos en esta práctica, ya que depende de la app que se vaya a implementar.Implementa la NavegaciónEl siguiente paso es añadir los listeners a los botones para que al ser pulsados naveguen a la siguiente pantalla.Abrimos el fichero Onboarding1Fragment.java. En este fichero vemos un código boilerplate generado por el asistente. Por el momento este código no nos interesa, así que borramos todo lo que hay antes del método onCreateView(), hasta dejar la clase Onboarding1Fragment así:Onboarding1Fragment.javapublic class Onboarding1Fragment extends Fragment { @Override public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) { return inflater.inflate(R.layout.fragment_onboarding1, container, false); }}Con ViewBinding:public class Onboarding1Fragment extends Fragment { private FragmentOnboarding1Binding binding; @Override public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) { return (binding = FragmentOnboarding1Binding.inflate(inflater, container, false)).getRoot(); }}Este método onCreateView() es similar a la llamada a setContentView() que vimos en la práctica anterior. Su función es establecer el fichero de layout para el Fragment, es decir, lo que se verá cuando se navegue a este fragment.Implementa el método onViewCreated()De forma general, podemos decir que el código que se ha de ejecutar en un fragment se pone en el método onViewCreated(). Este método lo ejecutará el Sistema Android una vez se haya establecido el layout del Fragment, es decir, cuando haya terminado el onCreateView().Implementemos este método:Onboarding1Fragment.javapublic class Onboarding1Fragment extends Fragment { @Override public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) { return inflater.inflate(R.layout.fragment_onboarding1, container, false); } @Override public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) { super.onViewCreated(view, savedInstanceState); }}Añade los listeners a los botonesTal como vimos en la práctica anterior, el primer paso será vincular los botones que hemos añadido en el layout XML con variables Java. Para ello usamos el método findViewById().Cuando trabajamos con fragments las llamadas a findViewById() las realizaremos en sobre el parámetro view, del método onViewCreated(). Este parámatro view que nos pasa el Sistema Android corresponde al layout que se creó en el método onCreateView().Declaramos la variable para el botón y usamos findViewById() para vincularlo al botón del XML:Onboarding1Fragment.javapublic class Onboarding1Fragment extends Fragment { Button botonSiguiente; @Override public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) { return inflater.inflate(R.layout.fragment_onboarding2, container, false); } @Override public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) { super.onViewCreated(view, savedInstanceState); botonSiguiente = view.findViewById(R.id.botonSiguiente); }}Si has usado ViewBinding, no es necesario crear la variable botonSiguiente ni llamar a findViewById(). Simplemente accede al botón con binding.botonSiguiente.El segundo paso será añadir el listener al botonSiguiente:Onboarding1Fragment.javapublic class Onboarding1Fragment extends Fragment { Button botonSiguiente; @Override public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) { return inflater.inflate(R.layout.fragment_onboarding2, container, false); } @Override public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) { super.onViewCreated(view, savedInstanceState); botonSiguiente = view.findViewById(R.id.botonSiguiente); botonSiguiente.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { // navegar al onboarding2 } }); }}Usa el NavController para navegar entre destinosPara navegar a los diferentes destinos, android proporciona la clase NavController. Esta clase es la responsable de intercambiar en el NavHost los diferentes fragments de la app.Para usar el NavController, primero lo guardamos en una variable con el método Navigation.findNavController(), y luego ya podemos llamar al método navigate() y pasarle la acción de navegacion que se debe realizar. Recuperamos el NavController con findNavController(): Onboarding1Fragment.java public class Onboarding1Fragment extends Fragment { Button botonSiguiente; NavController navController; @Override public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) { return inflater.inflate(R.layout.fragment_onboarding2, container, false); } @Override public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) { super.onViewCreated(view, savedInstanceState); navController = Navigation.findNavController(view); botonSiguiente = view.findViewById(R.id.botonSiguiente); botonSiguiente.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { // navegar al onboarding2 } }); }} Llamamos al metodo navigate() dentro del listener para que navegue al siguiente Fragment cuando se haga clic en el botón: Onboarding1Fragment.java public class Onboarding1Fragment extends Fragment { Button botonSiguiente; NavController navController; @Override public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) { return inflater.inflate(R.layout.fragment_onboarding2, container, false); } @Override public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) { super.onViewCreated(view, savedInstanceState); navController = Navigation.findNavController(view); botonSiguiente = view.findViewById(R.id.botonSiguiente); botonSiguiente.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { navController.navigate(R.id.action_onboarding1Fragment_to_onboarding2Fragment); } }); }} El parámetro pasado al método navigate() es el identificador de la acción de navegación que se debe realizar. En este caso del onboarding1 al onboarding2. Repetimos el mismo proceso en el Onboarding2Fragment, cambiando el identificador del botón, y el identificador de la acción de navegación:Onboarding2Fragment.javapublic class Onboarding2Fragment extends Fragment { Button botonFinalizar; NavController navController; @Override public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) { return inflater.inflate(R.layout.fragment_onboarding2, container, false); } @Override public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) { super.onViewCreated(view, savedInstanceState); navController = Navigation.findNavController(view); botonFinalizar = view.findViewById(R.id.botonFinalizar); botonFinalizar.setOnClickListener(new View.OnClickListener() { @Override public void onClick(View view) { navController.navigate(R.id.action_onboarding2Fragment_to_homeFragment); } }); }}Ahora puedes ejecutar la app y probar la navegación.Añade transiciones a la navegaciónPor defecto la transición entre los destinos de navagación es bastante insulsa. Simplemente coloca un destino sobre otro.Podemos personalizar la manera en que aparece el fragment de destino y la manera en que desaparece el fragment de origen.Las transiciones de una acción de navegación (&lt;action&gt;) se definen en 4 atributos: enterAnim y exitAnim: definen como entra el fragment destino y como sale el fragment origen, cuando se navega “hacia adelante” popEnterAnim y popExitAnim: definen la transición cuando se navega “hacia atrás” (pulsando el botón atrás)Android incorpora una serie de animaciones por defecto, y también permite definir tus propias animaciones. Haremos lo segundo.Define las animacionesPara esta aplicación haremos que el fragment destino aparezca deslizándose desde la derecha, y el fragment origen desaparezca deslizándose hacia la izquierda:Para ello, definiremos cuatro animaciones: slide_in_right, slide_in_left, slide_out_right y slide_out_left.Sobre el directiorio app, haz clic-derecho y selecciona New &gt; Android Resource FileIntroduce el nombre de la animación slide_in_right, y selecciona Animation como Resource Type:En el fichero res/anim/slide_in_right.xml que se ha creado, define la animación slide_in_right:slide_in_right.xml&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;&lt;set xmlns:android=\"http://schemas.android.com/apk/res/android\"&gt;&lt;translate android:fromXDelta=\"100%\" android:toXDelta=\"0%\" android:duration=\"700\"/&gt;&lt;/set&gt;Define también la animación slide_out_left:slide_out_left.xml&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;&lt;set xmlns:android=\"http://schemas.android.com/apk/res/android\"&gt;&lt;translate android:fromXDelta=\"0%\" android:toXDelta=\"-100%\" android:duration=\"700\"/&gt;&lt;/set&gt;La animación slide_out_right:slide_out_right.xml&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;&lt;set xmlns:android=\"http://schemas.android.com/apk/res/android\"&gt;&lt;translate android:fromXDelta=\"0%\" android:toXDelta=\"100%\" android:duration=\"700\"/&gt;&lt;/set&gt;Y la animación slide_in_left:slide_in_left.xml&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;&lt;set xmlns:android=\"http://schemas.android.com/apk/res/android\"&gt;&lt;translate android:fromXDelta=\"-100%\" android:toXDelta=\"0%\" android:duration=\"700\"/&gt;&lt;/set&gt;En las animaciones que hemos creado, simplemente realizamos un movimiento (translate) horizontal (fromXDelta &amp; toXDelta).Hay diversos tipos de animación que se pueden crear: transparencias, tamaños, rotación.Para +info consulta: Animación de vistas.Además de las animaciones en la navegación, Android incorpora el MotionLayout para crear animaciones dentro de una “pantalla”. Consulta Construye animaciones con el Motion EditorAsigna las animaciones a las accionesAbre el fichero nav_graph.xml y establece los siguientes atributos a las dos acciones:nav_graph.xml...&lt;action ... app:enterAnim=\"@anim/slide_in_right\" app:exitAnim=\"@anim/slide_out_left\" app:popEnterAnim=\"@anim/slide_in_left\" app:popExitAnim=\"@anim/slide_out_right\" /&gt;...También lo puedes hacer en modo Design.Selecciona cada acción y establece los atributos enterAnim, exitAnim, popEnterAnim y popExitAnim:El resultado final es este:Práctica: OnboardingImplementa un Onboarding de 3 pantallas. En las dos primeras debe haber una opción para omitir (skip). Utilitza diferentes animaciones en cada acción de navegación.Ejemplo:Grafo de navegación:Webgrafía: gerardfp.github.io" }, { "title": "Primeros pasos en Firebase", "url": "/documentacion/posts/firebase-primeros-pasos/", "categories": "Java, api, firebase", "tags": "java, firebase, json, api", "date": "2022-06-03 11:11:00 +0200", "snippet": "Primeros pasos en FirebaseFirebase es una plataforma que provee una serie de servicios para el desarrollo de apps.Entre estos servicios encontramos: Firebase Analytics: análisis del uso de nuestra...", "content": "Primeros pasos en FirebaseFirebase es una plataforma que provee una serie de servicios para el desarrollo de apps.Entre estos servicios encontramos: Firebase Analytics: análisis del uso de nuestras apps Firebase Cloud Messaging: mensajes y notificaciones para iOS y Android Firebase Auth: autenticacion de usuarios Firebase Realtime Database: base de datos en tiempo real Cloud Firestore: base de datos NoSQL Firebase Storage: almacenamiento de ficheros Firebase Hosting: hosting de páginas web ML Kit: funciones de machine learning Crashlytics: análisis de errores en la app Performance: análisis del rendimiento de la app Firebase Test Lab: testeo de la app Admob: integración de anuncios en la app Firebase Dynamic Links: enlaces para instalar la app, con información preintroducidaAbre el proyecto AndroidPuedes usar esta plantilla como base para el proyecto: FirebaseTemplateConecta la app a Firebase Selecciona Herramientas &gt; Firebase para abrir la ventana del Asistente. Haz click en Authentication, y luego en Authenticate using Google Sign-in: Es posible que en lugar de Authenticate using Google Sign-in te aparezca Authenticate using email and password. No importa, haz clic igualmente. Haz clic en Connect to Firebase Se abrirá la Consola de Firebase en el navegador web. Loguéate con una cuenta y haz clic en Add project : Introduce un nombre del proyecto (el que desees) y haz clic en Continue En el paso 2, no es necesario que actives Google Analytics. Haz clic en Create project Añade la huella SHA-1 de la appEl siguiente paso es añadir la huella SHA-1 de nuestra app. Esto permitirá a nuestra app acceder a los servicios de Firebase. En Studio, abre la ventana Gradle y haz click en la tarea signInReport Copia la clave SHA-1 que aparece en el panel inferior Ahora ve a la Consola Firebase. Abre el proyecto firebase, y ve a Settings / Project settings: Comprueba que esté seleccionado el nombre de package correspondiente a la app: Baja hasta el apartado SHA certificate fingerprints y haz clic en Add fingerprint: Pega la clave y haz clic en Save: AutenticaciónUna vez conectada la app con Firebase, desarollaremos la autenticación de usuarios con cuenta Google.Añade las librerías del Firebase Authentication SDK En Studio, vuelve al asistente Firebase, y haz click en Add the Firebase Authentication SDK to you app: Aparecerá un diálogo informando de los cambios que se van a realizar en los ficheros build.gradle. Haz clic en Accept changes. Activa el proveedor de autenticación GoogleAhora activaremos la autenticación mediante cuentas de Google. En la Consola Firebase, ve al apartado Authentication y haz clic en Get started: Haz clic en el provider Google. Introduce un Project support email y haz clic en Save: Prueba la autenticaciónPor último programaremos un pequeño test para ver que la app para que realiza correctamente la auntenticación con una cuenta de Google:Primero añade estas tres dependencias en el build.gradle (module: App)implementation 'com.google.android.gms:play-services-auth:19.0.0'implementation 'androidx.activity:activity:1.2.0-rc01'implementation 'androidx.fragment:fragment:1.3.0-rc01'Pon este código en la MainActivity:import android.content.Intent;import android.os.Bundle;import androidx.activity.result.ActivityResultLauncher;import androidx.activity.result.contract.ActivityResultContracts;import androidx.appcompat.app.AppCompatActivity;import com.google.android.gms.auth.api.signin.GoogleSignIn;import com.google.android.gms.auth.api.signin.GoogleSignInOptions;import com.google.android.gms.common.api.ApiException;import com.google.firebase.auth.FirebaseAuth;import com.google.firebase.auth.GoogleAuthProvider;public class MainActivity extends AppCompatActivity { @Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); signInClient.launch(GoogleSignIn.getClient(this, new GoogleSignInOptions.Builder(GoogleSignInOptions.DEFAULT_SIGN_IN).requestIdToken(getString(R.string.default_web_client_id)).build()).getSignInIntent()); } ActivityResultLauncher&lt;Intent&gt; signInClient = registerForActivityResult(new ActivityResultContracts.StartActivityForResult(), result -&gt; { try { FirebaseAuth.getInstance().signInWithCredential(GoogleAuthProvider.getCredential(GoogleSignIn.getSignedInAccountFromIntent(result.getData()).getResult(ApiException.class).getIdToken(), null)); } catch (ApiException e) {} });}El recurso R.string.default\\_web\\_client\\_id aparecerá en rojo debido a que no existe. No te preocupes, Gradle lo generará automáticamente cuando compile la app.Ejecuta la app y autentícate con una cuenta de Google. Luego comprueba que en la Consola Firebase del Proyecto aparece el usuario que se ha autenticado:Para ejecutar la aplicación tendras que volver a seleccionar app en el selector de configuraciones: FirestoreHabilitaremos una base de datos Firestore, que permitirá a nuestra app guardar datos en la nube.Añade las librerías del Cloud Firestore SDK Ve al Asistente Firebase de Android Studio, y selecciona la opción Cloud Firestore. Haz clic en Get started with Cloud Firestore Haz clic en Add the Cloud Firestore SDK to your app: Aparecerá un diálogo informando de los cambios que se van a realizar en los ficheros build.gradle. Haz clic en Accept changes. Crea la base de datos Firestore Ve a la Consola de Firebase, y abre el proyecto firebase. Ve al apartado Cloud Firestore y haz clic en Create database: Selecciona “Start in production mode”. Haz clic en Next Selecciona la localización eur3 (europe-west) y clic en Enable Establece las reglas de acceso a la base de datosCambiaremos las reglas de acceso a la base de datos para permitir la lectura y escritura Ve a la pestaña Rules y establece las siguientes reglas: rules_version = '2';service cloud.firestore { match /databases/{database}/documents { match /{document=**} { allow read, write; } }} Publica las reglas haciendo clic en Publish: Prueba la base de datosProgramaremos un pequeño test de escritura de datos.public class MainActivity extends AppCompatActivity { @Override protected void onCreate(Bundle savedInstanceState) { //... class Post { public String title; public String message; Post(String t, String m){ title = t; message=m; } } FirebaseFirestore.getInstance().collection(\"posts\").add(new Post(\"Hello\", \"hello world!\")); }}Comprueba que los datos se han guardado en la base de datos Firestore.StorageEl servicio Storage permite subir ficheros a la nube, y descargarlos mediante una URL de descarga.Los pasos para activarlo son los mismos que hemos hecho antes: Desde el Asistente Firebase de Android Studio, añade las librerías Storage a la app. En la Consola Firebase, ve a la opción Storage y comprueba que está activado. En la sección Rules del Storage, edita y publica las reglas para permitir la lectura/escritura de ficheros. Por último, prueba que funciona añadiendo este código a la app.// Storagebyte[] bytes = {-1,-40,-1,-32,0,16,74,70,73,70,0,1,2,0,0,1,0,1,0,0,-1,-37,0,67,0,8,6,6,7,6,5,8,7,7,7,9,9,8,10,12,20,13,12,11,11,12,25,18,19,15,20,29,26,31,30,29,26,28,28,32,36,46,39,32,34,44,35,28,28,40,55,41,44,48,49,52,52,52,31,39,57,61,56,50,60,46,51,52,50,-1,-37,0,67,1,9,9,9,12,11,12,24,13,13,24,50,33,28,33,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,-1,-64,0,17,8,0,15,0,15,3,1,34,0,2,17,1,3,17,1,-1,-60,0,31,0,0,1,5,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,8,9,10,11,-1,-60,0,-75,16,0,2,1,3,3,2,4,3,5,5,4,4,0,0,1,125,1,2,3,0,4,17,5,18,33,49,65,6,19,81,97,7,34,113,20,50,-127,-111,-95,8,35,66,-79,-63,21,82,-47,-16,36,51,98,114,-126,9,10,22,23,24,25,26,37,38,39,40,41,42,52,53,54,55,56,57,58,67,68,69,70,71,72,73,74,83,84,85,86,87,88,89,90,99,100,101,102,103,104,105,106,115,116,117,118,119,120,121,122,-125,-124,-123,-122,-121,-120,-119,-118,-110,-109,-108,-107,-106,-105,-104,-103,-102,-94,-93,-92,-91,-90,-89,-88,-87,-86,-78,-77,-76,-75,-74,-73,-72,-71,-70,-62,-61,-60,-59,-58,-57,-56,-55,-54,-46,-45,-44,-43,-42,-41,-40,-39,-38,-31,-30,-29,-28,-27,-26,-25,-24,-23,-22,-15,-14,-13,-12,-11,-10,-9,-8,-7,-6,-1,-60,0,31,1,0,3,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,2,3,4,5,6,7,8,9,10,11,-1,-60,0,-75,17,0,2,1,2,4,4,3,4,7,5,4,4,0,1,2,119,0,1,2,3,17,4,5,33,49,6,18,65,81,7,97,113,19,34,50,-127,8,20,66,-111,-95,-79,-63,9,35,51,82,-16,21,98,114,-47,10,22,36,52,-31,37,-15,23,24,25,26,38,39,40,41,42,53,54,55,56,57,58,67,68,69,70,71,72,73,74,83,84,85,86,87,88,89,90,99,100,101,102,103,104,105,106,115,116,117,118,119,120,121,122,-126,-125,-124,-123,-122,-121,-120,-119,-118,-110,-109,-108,-107,-106,-105,-104,-103,-102,-94,-93,-92,-91,-90,-89,-88,-87,-86,-78,-77,-76,-75,-74,-73,-72,-71,-70,-62,-61,-60,-59,-58,-57,-56,-55,-54,-46,-45,-44,-43,-42,-41,-40,-39,-38,-30,-29,-28,-27,-26,-25,-24,-23,-22,-14,-13,-12,-11,-10,-9,-8,-7,-6,-1,-38,0,12,3,1,0,2,17,3,17,0,63,0,118,-85,-29,-117,29,93,87,82,-41,-76,109,66,-14,11,-101,-77,5,-115,-101,121,50,71,-126,-85,36,91,109,-4,-45,-105,-14,-92,-116,-77,-19,36,52,-123,119,0,66,-119,108,62,36,105,-2,19,-66,-123,-19,116,-19,70,29,52,-38,-91,-35,-35,-110,60,47,28,118,-14,15,-35,-68,113,-119,113,19,-105,120,-55,81,-73,43,35,51,41,59,72,-46,-15,61,-124,30,6,22,-9,23,105,101,109,111,4,-98,69,-122,-83,53,-97,-38,54,68,119,-108,-73,-62,-80,-107,89,87,35,119,42,85,114,78,-25,42,38,-16,-65,-123,-20,-4,101,100,-9,51,91,91,-51,-95,-33,74,102,-69,-71,-118,1,108,53,2,-91,-107,81,85,91,-51,80,-78,2,-20,-50,65,-36,-72,27,-107,-50,-33,30,10,127,89,-65,43,-65,-85,-73,-7,109,-78,-36,-19,110,62,-53,117,111,77,79,-1,-39};FirebaseStorage.getInstance().getReference(\"emoji.jpg\").putBytes(bytes);Comprueba que se ha subido el fichero al Storage.Webgrafía: gerardfp.github.io" }, { "title": "Spring Boot API", "url": "/documentacion/posts/springboot-api/", "categories": "Java, api, springboot", "tags": "java, springboot, json, api", "date": "2022-06-03 10:15:00 +0200", "snippet": "Spring Boot APISpring Boot web services using JPAhttps://github.com/gerardfp/demoDatabase serverMàquina virtualDescarrega aquesta imatge de disc dur virtual: debian-11-nocloud-amd64.qcow2Crea una n...", "content": "Spring Boot APISpring Boot web services using JPAhttps://github.com/gerardfp/demoDatabase serverMàquina virtualDescarrega aquesta imatge de disc dur virtual: debian-11-nocloud-amd64.qcow2Crea una nova màquina virtual amb la imatge descarregada.Inicia la màquina virtual i esbrina la seva IP.Descarrega aquesta clau privada: id_rsa-----BEGIN OPENSSH PRIVATE KEY-----b3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAABlwAAAAdzc2gtcnNhAAAAAwEAAQAAAYEAsRssmOUxHdhxVT/6Fp5nodovfMDSgi7z0Dxp8GinLGaQnXrNRdmtJMr3zi3GNdSocR7NGR8eCgyownNGeYXPhzdndrt4SSpBPErULgYuD6Q3xwgTFhOyB9+ZE62d3tsTOVhtBp/E/eYEoSOhOi2knT4x8BCBEQSxXtMsiB6I7aSMvoL6sS93iVyhJGxqaPjob9LJ7OUxnNQu92SDVvo2+/9YCFtchA0D/AXpsL0d5UXynTRtmAwxDXM8QTSbogWByp/eI7arNcgpbM+PVuAyzO27CiD/flSpenB+5XpxZtE4WoTCzmBj8pD76Py3BdYDO6tReJE/Gg4dTezw98OFv7l7HnzqRkK9dOWNktwsGJqJTkTKRt9/oBG43xjcWojkMc/Q0gmOmNJe5jS9sDbQRwLPWFxTencZyFp9UuhCxZ6xqgpIUATj9VqVin9hBDyIJuHLDMFA2agk8MusXHIfIJRrI18MlvV+UBylDPzAPlfftGLvyWTAf3LWE04YNgbPAAAFgCn7klgp+5JYAAAAB3NzaC1yc2EAAAGBALEbLJjlMR3YcVU/+haeZ6HaL3zA0oIu89A8afBopyxmkJ16zUXZrSTK984txjXUqHEezRkfHgoMqMJzRnmFz4c3Z3a7eEkqQTxK1C4GLg+kN8cIExYTsgffmROtnd7bEzlYbQafxP3mBKEjoTotpJ0+MfAQgREEsV7TLIgeiO2kjL6C+rEvd4lcoSRsamj46G/SyezlMZzULvdkg1b6Nvv/WAhbXIQNA/wF6bC9HeVF8p00bZgMMQ1zPEE0m6IFgcqf3iO2qzXIKWzPj1bgMsztuwog/35UqXpwfuV6cWbROFqEws5gY/KQ++j8twXWAzurUXiRPxoOHU3s8PfDhb+5ex586kZCvXTljZLcLBiaiU5Eykbff6ARuN8Y3FqI5DHP0NIJjpjSXuY0vbA20EcCz1hcU3p3GchafVLoQsWesaoKSFAE4/ValYp/YQQ8iCbhywzBQNmoJPDLrFxyHyCUayNfDJb1flAcpQz8wD5X37Ri78lkwH9y1hNOGDYGzwAAAAMBAAEAAAGACtmeVtObubdb4hwkRyR3Ntw2Eo+BlgYoW7aHyvmuXDMAYxV14/Sc/ecNXW1CemPH2f5IFGTqozT5VchYJfPDrgX/6a88hEb5bicrbpJkWgL2g9QDz1NvkbnqF+GIDXIgcF/xdfltyRxBZlnXc8f+EMARsSJhtdgywZtwW/p66wwsrzM5Bofg6+Jn4OJfdoThQJCKXGACNRhutCtNPJPhsHiJPSHTvidJ+jOmiHRdk4FAhs8Cc9EzZB6OL3R4oGlz2wJAQ4zfdCM542FIPQ98PDmo+zsXVxVSdsEYhZpqhT7PGWBzUl7IuEvVMODlC+nn/LbWGonH91bs7eP2S2AoB4ZEXbwMr9gfKrTktqsbo+gD/9L0vwxUB3BVf+925Bc+EDkts5pmARJIF74lzOyCjR08KrZInrtLNUvCSHFS+Rp6N21HponTsGeW6PRLJzAMuW8tUX2UuVi5O+RvF5LXfFlZDWqXqz2IcdRGPRY3IMA5iBKmvy97kkFfaCQJ3J+BAAAAwQCxWpc135Ooz3QyeAPpcECxO+Wdrs+VlIecZkaSC5cpJrhvTbwwxTSxzPJwyV2BoeuLgEwNpedoQiQCn0HMDZR1Pbw0XhvRSaeu4nHVWOo7sb0M/stujTjOttvV6ITb7vtBPRywwckiGvnuUdA+8VAZf6KlTv5gvesxPAgsgCmVTPz/nC+YhLfblCw1pC0HmSK+IkgSi9pZtNgpYXYDHum6So3evzVhwniXIm/zwp072/RVq9qt4mKwlot/l3qzyzIAAADBAOHyFS5dvY5RPbD+TjEzQOF4bH0B5JMX/tRC6hj8SnZ4yyBnXfFMvj6UoemXw05dnv7YXPk8hN12To9myGRZoPbh1NIVM39tKZ2GenkmuQXfM/izqBxekrWYHOgzN2d7sE/bBEm62cfOdQNzIlQERLZO8/yxdFQ3B0dJcHLvGaHTZoAgVgLd7kMsGjqc4sHKeqqE9P/BKH6Y8SzGQYOggYfmreFJmq52Di7qN9qDicQVAbwvK5VjyZaxAebmtMOhwQAAAMEAyKoBdpT9qFBYBlfQdbaN1WdUfOvuuLI08Q+5ObgaVfWTR8nSm4YXo4AM7drJdJaOiQeRxYn/2xwH0mykcRTf5TJzvGgR1YLxU2HqxIkdskiR2oLg3+YLmYoQP0SYarjmo3SETiawg7gHFjIsigWQPmaf315mtEBUxyRVOwyEe190GrUFH1dnTZzlP3w2wL4wVQdI58U66zG5PeOwWIk+Qv6gU2K3vK5i2CUYoI9CqHciDBV90k60XApYsxosgayPAAAACmdmYWxjb0BkMDY=-----END OPENSSH PRIVATE KEY-----Estableix permisos 600 al fitxer de la clau:chmod 600 /path/to/id_rsaUtilitza aquesta clau per a accedir a la màquina virtual per ssh:ssh -i /path/to/id_rsa root@192.168.122.1Docker PostgresqlInstal·la Docker a la màquina virtual:curl -fsSL https://get.docker.com -o get-docker.sh &amp;&amp; sh get-docker.shInicia un contenidor Docker amb la base de dades PostreSQL:docker run -d --name myapi-postgres -e POSTGRES\\_PASSWORD=mysecretpassword -e POSTGRES\\_USER=myapidbadmin -e POSTGRES\\_DB=myapidb -p 5432:5432 -v /root/db\\_data:/var/lib/postgresql/data postgresHabilita l’inici automàtic del contenidor:/etc/systemd/system/myapi-postgres.service[Unit]Description=MyApi containerRequires=docker.serviceAfter=docker.service[Service]Restart=alwaysExecStart=/usr/bin/docker start -a myapi-postgresExecStop=/usr/bin/docker stop -t 2 myapi-postgres[Install]WantedBy=default.targetsystemctl enable myapi-postgres.serviceEl següent pas és accedir al contenidor per a crear l’esquema de la base de dades.Esbrina el CONTAINER ID amb la comanda:docker psInicia un shell (bash) al contenidor amb la comanda:docker exec -it 6516a4b4e3c2 bashAccedeix al shell psql amb la comanda:psql -U myapidbadmin myapidbCopia i enganxa aquest script SQL al shell:DROP TABLE IF EXISTS movie, actor, genre, movie_actor, movie_genre CASCADE;CREATE TABLE IF NOT EXISTS movie (\tmovieid uuid NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,\ttitle text,\timageurl text);CREATE TABLE IF NOT EXISTS actor (\tactorid uuid NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,\tname text,\timageurl text);CREATE TABLE IF NOT EXISTS genre (\tgenreid uuid NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,\tlabel text);CREATE TABLE IF NOT EXISTS movie_actor (\tmovieid uuid REFERENCES movie(movieid) ON DELETE CASCADE,\tactorid uuid REFERENCES actor(actorid) ON DELETE CASCADE);CREATE TABLE IF NOT EXISTS movie_genre (\tmovieid uuid REFERENCES movie(movieid) ON DELETE CASCADE,\tgenreid uuid REFERENCES genre(genreid) ON DELETE CASCADE);INSERT INTO movie(title, imageurl) VALUES\t('Movie One','movie1.jpg'),\t('Movie Two','movie2.jpg'),\t('Movie Three','movie3.jpg'),\t('Movie Four','movie4.jpg');INSERT INTO actor(name, imageurl) VALUES\t('Actor One','actor1.jpg'),\t('Actor Two','actor2.jpg'),\t('Actor Three','actor3.jpg'),\t('Actor Four','actor4.jpg'),\t('Actor Five','actor5.jpg');INSERT INTO genre(label) VALUES\t('Genre One'),\t('Genre Two'),\t('Genre Three');INSERT INTO movie_actor VALUES\t((SELECT movieid FROM movie WHERE title='Movie One'),(SELECT actorid FROM actor WHERE name='Actor One')),\t((SELECT movieid FROM movie WHERE title='Movie One'),(SELECT actorid FROM actor WHERE name='Actor Two')),\t((SELECT movieid FROM movie WHERE title='Movie Two'),(SELECT actorid FROM actor WHERE name='Actor Three')),\t((SELECT movieid FROM movie WHERE title='Movie Two'),(SELECT actorid FROM actor WHERE name='Actor Four')),\t((SELECT movieid FROM movie WHERE title='Movie Three'),(SELECT actorid FROM actor WHERE name='Actor Four')),\t((SELECT movieid FROM movie WHERE title='Movie Three'),(SELECT actorid FROM actor WHERE name='Actor Five')),\t((SELECT movieid FROM movie WHERE title='Movie Four'),(SELECT actorid FROM actor WHERE name='Actor One')),\t((SELECT movieid FROM movie WHERE title='Movie Four'),(SELECT actorid FROM actor WHERE name='Actor Four'));INSERT INTO movie_genre VALUES ((SELECT movieid FROM movie WHERE title='Movie One'),(SELECT genreid FROM genre WHERE label='Genre One')), ((SELECT movieid FROM movie WHERE title='Movie One'),(SELECT genreid FROM genre WHERE label='Genre Two')), ((SELECT movieid FROM movie WHERE title='Movie Two'),(SELECT genreid FROM genre WHERE label='Genre One')), ((SELECT movieid FROM movie WHERE title='Movie Three'),(SELECT genreid FROM genre WHERE label='Genre One')), ((SELECT movieid FROM movie WHERE title='Movie Three'),(SELECT genreid FROM genre WHERE label='Genre Two')), ((SELECT movieid FROM movie WHERE title='Movie Three'),(SELECT genreid FROM genre WHERE label='Genre Three'));Spring bootAccedeix a spring initializr per a generar un projecte Spring BootSelecciona Gradle ProjectAfegeix les dependències: Spring Web Spring Data JPA PostgreSQL DriverGenera el projecte i descomprimeix-lo. Obre’l amb IntelliJConfigura l’accés a la base de dades:src/main/resources/application.propertiesspring.datasource.url= jdbc:postgresql://192.168.122.99:5432/myapidbspring.datasource.username= myapidbadminspring.datasource.password= mysecretpasswordspring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation= truespring.jpa.properties.hibernate.dialect= org.hibernate.dialect.PostgreSQLDialectL’arquitectura bàsica de la nostra ApiHttp amb Spring Boot serà aquesta:ModelLes classes Model serveixen per a crear objectes amb les dades i així poder transportar-les d’un component a un altre.Començarem creant la classe Movie que ens servirà per a transportar les dades d’una pel·lícula:src/main/java/com/example/demo/domain/model/Movie.javaimport javax.persistence.*;import java.util.UUID;@Entity@Table(name = \"movie\")public class Movie { @Id @GeneratedValue(strategy = GenerationType.AUTO) public UUID movieid; public String title; public String imageurl;}Repositorysrc/main/java/com/example/demo/repository/MovieRepository.javaimport com.example.demo.domain.model.Movie;import org.springframework.data.jpa.repository.JpaRepository;import java.util.UUID;public interface MovieRepository extends JpaRepository&lt;Movie, UUID&gt; {}Controllersrc/main/java/com/example/demo/controller/MovieController.javaimport com.example.demo.domain.model.Movie;import com.example.demo.repository.MovieRepository;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.web.bind.annotation.*;import java.util.List;@RestController@RequestMapping(\"/movies\")public class MovieController { @Autowired private MovieRepository movieRepository; @GetMapping(\"/\") public List&lt;Movie&gt; findAllMovies() { return movieRepository.findAll(); } @PostMapping(\"/\") public Movie createMovie(@RequestBody Movie movie) { return movieRepository.save(movie); }}Database migrationsLa llibreria Flyway permet gestionar els canvis en l’esquema de la base de dades.Agegeix Flyway al projecte:build.gradleplugins { ... id 'org.flywaydb.flyway' version '8.0.2'}flyway { configFiles = ['src/main/resources/application.properties']}dependencies { ... implementation 'org.flywaydb:flyway-core:8.0.1'}Configura els paràmetres d’accés a la base de dades:src/main/resources/application.propertiesflyway.url=jdbc:postgresql://192.168.122.99:5432/myapidbflyway.schemas=publicflyway.user=myapidbadminflyway.password=mysecretpasswordspring.flyway.baseline_on_migrate=trueCrea una primera versió de l’esquema de la base de dades. Les migracions de l’esquema de la base de dades es defineixen creant arxius al directori resources/db/migration/. El nom d’aquests arxius ha de seguir una nomenclatura específica (veure: migrations#naming)Crea l’arxiu resources/db/migration/V1__createdatabase.sql:resources/db/migration/V1__createdatabase.sqlCREATE TABLE IF NOT EXISTS movie ( movieid uuid NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY, title text, synopsis text, imageurl text);CREATE TABLE IF NOT EXISTS actor ( actorid uuid NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY, name text, imageurl text);CREATE TABLE IF NOT EXISTS genre ( genreid uuid NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY, label text);CREATE TABLE IF NOT EXISTS movie_actor ( movieid uuid REFERENCES movie(movieid) ON DELETE CASCADE, actorid uuid REFERENCES actor(actorid) ON DELETE CASCADE, PRIMARY KEY (movieid, actorid));CREATE TABLE IF NOT EXISTS movie_genre ( movieid uuid REFERENCES movie(movieid) ON DELETE CASCADE, genreid uuid REFERENCES genre(genreid) ON DELETE CASCADE, PRIMARY KEY (movieid, genreid));;INSERT INTO movie(title, synopsis, imageurl) VALUES ('Movie One','This is the One Movie','movie1.jpg'), ('Movie Two','The Two Movie is the next','movie2.jpg'), ('Movie Three','The Trilogy','movie3.jpg'), ('Movie Four','Four movies is too much','movie4.jpg');INSERT INTO actor(name, imageurl) VALUES ('Actor One','actor1.jpg'), ('Actor Two','actor2.jpg'), ('Actor Three','actor3.jpg'), ('Actor Four','actor4.jpg'), ('Actor Five','actor5.jpg');INSERT INTO genre(label) VALUES ('Genre One'), ('Genre Two'), ('Genre Three');INSERT INTO movie_actor VALUES ((SELECT movieid FROM movie WHERE title='Movie One'),(SELECT actorid FROM actor WHERE name='Actor One')), ((SELECT movieid FROM movie WHERE title='Movie One'),(SELECT actorid FROM actor WHERE name='Actor Two')), ((SELECT movieid FROM movie WHERE title='Movie Two'),(SELECT actorid FROM actor WHERE name='Actor Three')), ((SELECT movieid FROM movie WHERE title='Movie Two'),(SELECT actorid FROM actor WHERE name='Actor Four')), ((SELECT movieid FROM movie WHERE title='Movie Three'),(SELECT actorid FROM actor WHERE name='Actor Four')), ((SELECT movieid FROM movie WHERE title='Movie Three'),(SELECT actorid FROM actor WHERE name='Actor Five')), ((SELECT movieid FROM movie WHERE title='Movie Four'),(SELECT actorid FROM actor WHERE name='Actor One')), ((SELECT movieid FROM movie WHERE title='Movie Four'),(SELECT actorid FROM actor WHERE name='Actor Four'));INSERT INTO movie_genre VALUES ((SELECT movieid FROM movie WHERE title='Movie One'),(SELECT genreid FROM genre WHERE label='Genre One')), ((SELECT movieid FROM movie WHERE title='Movie One'),(SELECT genreid FROM genre WHERE label='Genre Two')), ((SELECT movieid FROM movie WHERE title='Movie Two'),(SELECT genreid FROM genre WHERE label='Genre One')), ((SELECT movieid FROM movie WHERE title='Movie Three'),(SELECT genreid FROM genre WHERE label='Genre One')), ((SELECT movieid FROM movie WHERE title='Movie Three'),(SELECT genreid FROM genre WHERE label='Genre Two')), ((SELECT movieid FROM movie WHERE title='Movie Three'),(SELECT genreid FROM genre WHERE label='Genre Three'));Heroku deploy Afegeix aquest arxiu de configuració del projecte: src/main/resources/application-production.properties spring.datasource.url=${JDBC_DATABASE_URL:} spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect server.port=${PORT:} Les variables ${JDBC_DATABASE_URL:} i ${PORT:} són variables d’entorn proporcionades per Heroku. Afegeix aquest arxiu al directori arrel del projecte. És la comanda que executarà Heroku per a iniciar l’aplicació: Procfile web: java -Dspring.profiles.active=production -jar build/libs/myapi-0.0.1-SNAPSHOT.jar Amb l’opció -Dspring.profiles.active=production li diem que agafi l’arxiu de configuració application-production.properties myapi-0.0.1-SNAPSHOT: El nom del projecte el trobaràs a l’arxiu settings.gradle, i la versió a l’arxiu build.gradle. Publica el projecte a GitHub. Crea un compte a Heroku Crea una nova app a Heroku: Escull “GitHub” com a Deployment method Connecta el repositori GitHub Activa el desplegament automàtic (cada cop que facis un push, es desplegarà de nou la app) Per últim fes el desplegament inicial de la app Afegeix el servidor Postgres a Heroku: Ves a la pestanya i afegeix l’add-on “Heroku postgres” File uploadsAfegirem una migració de la base de dades per a crear una taula que emmagatzemi els arxius que carregin (upload)Crea aquest arxiu de migració:src/main/resources/db/migration/V2__filetable.sqlCREATE TABLE file ( fileid UUID NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY, contenttype TEXT, data bytea);Creem el model:src/main/java/com/example/demo/domain/model/File.javaimport org.hibernate.annotations.Type;import javax.persistence.*;import java.util.UUID;@Entity@Table(name = \"file\")public class File { @Id @GeneratedValue(strategy = GenerationType.AUTO) public UUID fileid; public String contenttype; @Lob @Type(type=\"org.hibernate.type.BinaryType\") public byte[] data;}Creem el repository:src/main/java/com/example/demo/repository/FileRepository.javaimport com.example.demo.domain.model.File;import org.springframework.data.jpa.repository.JpaRepository;import java.util.UUID;public interface FileRepository extends JpaRepository&lt;File, UUID&gt; {}I per últim el controlador:src/main/java/com/example/demo/controller/FileController.javaimport com.example.demo.domain.model.File;import com.example.demo.repository.FileRepository;import org.springframework.http.MediaType;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.*;import org.springframework.web.multipart.MultipartFile;import java.util.List;import java.util.UUID;@RestController@RequestMapping(\"/files\")public class FileController { private final FileRepository fileRepository; FileController(FileRepository fileRepository){ this.fileRepository = fileRepository; } @PostMapping public String upload(@RequestParam(\"file\") MultipartFile uploadedFile) { try { File file = new File(); file.contenttype = uploadedFile.getContentType(); file.data = uploadedFile.getBytes(); return fileRepository.save(file).fileid.toString(); } catch (Exception e) { e.printStackTrace(); return null; } } @GetMapping(\"/{id}\") public ResponseEntity&lt;byte[]&gt; getFile(@PathVariable UUID id) { File file = fileRepository.findById(id).orElse(null); if (file == null) return ResponseEntity.notFound().build(); return ResponseEntity.ok() .contentType(MediaType.valueOf(file.contenttype)) .contentLength(file.data.length) .body(file.data); }}Autenticació i autoritzacióCrea aquest arxiu de migració:src/main/resources/db/migration/V3__usertable.sqlCREATE TABLE usser ( userid uuid NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY, username varchar(24) NOT NULL UNIQUE, password varchar(255) NOT NULL, role varchar(10), enabled boolean DEFAULT true ); -- afegim un usuari de prova CREATE EXTENSION IF NOT EXISTS pgcrypto; INSERT INTO usser (username, password) VALUES ('user', crypt('pass', gen_salt('bf')));Afegeix la llibreria spring-boot-starter-security:build.gradledependencies { ... implementation 'org.springframework.boot:spring-boot-starter-security'}Creem el model User:src/main/java/com/example/demo/domain/model/User.javaimport javax.persistence.*;import java.util.UUID;@Entity@Table(name=\"usser\")public class User { @Id @GeneratedValue(strategy = GenerationType.AUTO) public UUID userid; public String username; public String password; public String role; public boolean enabled;}Creem el repository:src/main/java/com/example/demo/repository/UserRepository.javaimport com.example.demo.domain.model.User;import org.springframework.data.jpa.repository.JpaRepository;import java.util.UUID;public interface UserRepository extends JpaRepository { User findByUsername(String username);}Afegim la configuració de seguretat:src/main/java/com/example/demo/SecurityConfig.javaimport org.springframework.beans.factory.annotation.Autowired;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;import org.springframework.security.config.annotation.web.builders.HttpSecurity;import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;import org.springframework.security.config.http.SessionCreationPolicy;import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;import javax.sql.DataSource;@Configuration@EnableWebSecuritypublic class SecurityConfig extends WebSecurityConfigurerAdapter { @Autowired private DataSource dataSource; @Bean public BCryptPasswordEncoder getPasswordEncoder() { return new BCryptPasswordEncoder(); } @Override protected void configure(HttpSecurity httpSecurity) throws Exception { httpSecurity .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS) .and().csrf().disable() .authorizeRequests() //.mvcMatchers(\"/users/register/\") // .permitAll() .anyRequest() .authenticated() .and() .httpBasic(); } @Override protected void configure(AuthenticationManagerBuilder auth) throws Exception { auth .jdbcAuthentication() .dataSource(dataSource) .usersByUsernameQuery(\"select username, password, enabled from usser where username = ?\") .authoritiesByUsernameQuery(\"select username, role from usser where username = ?\") .passwordEncoder(getPasswordEncoder()); }}Registre d’usuarisPer al registre d’usuaris necessitarem una classe (DTO) que per guardar les dades que ens envia l’usuari (username i password):src/main/java/com/example/demo/domain/dto/UserRegisterRequest.javapublic class UserRegisterRequest { public String username; public String password;}També necessitarem un controlador per atendre les peticions de registre:src/main/java/com/example/demo/controller/UserController.javaimport com.example.demo.domain.dto.UserRegisterRequest;import com.example.demo.domain.model.User;import com.example.demo.repository.UserRepository;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;import org.springframework.web.bind.annotation.*;import java.util.List;@RestController@RequestMapping(\"/users\")public class UserController { @Autowired private UserRepository userRepository; @Autowired private BCryptPasswordEncoder passwordEncoder; @PostMapping(\"/register\") public String register(@RequestBody UserRegisterRequest userRegisterRequest) { if (userRepository.findByUsername(userRegisterRequest.username) == null) { User user = new User(); user.username = userRegisterRequest.username; user.password = passwordEncoder.encode(userRegisterRequest.password); user.enabled = true; userRepository.save(user); return \"OK\"; // TODO } return \"ERROR\"; // TODO }}Per últim caldrà permetre l’accés a usuaris no autenticats a l’endpoint de registre (/users/register):src/main/java/com/example/demo/SecurityConfig.java .mvcMatchers(“/users/register/”) .permitAll()ResponseEntityPer a que els mètodes REST retornin respostes de forma adequada podem utilitzar la classe ResponseEntity.Aquesta classe té uns mètodes builder que ens permeten establir el HttpStatus, les capçaleres HTTP i el cos de la resposta.Haurem d’implementar els mètdoes Mapping dels controlladors de forma que retornin un objecte de classe ResponseEntity&lt;?&gt;Per exemple, en el següent codi retornem l’status 200 (OK) i afegim al cos de la resposta l’objecte movie que tot just s’ha creat.@PostMappingpublic ResponseEntity&lt;?&gt; createMovie(@RequestBody Movie movie, Authentication authentication) { Movie movie = movieRepository.save(movie); return ResponseEntity.ok().body(movie);}L’objecte movie que hem posat al body() es serialitzarà a dades JSON així:{ \"movieid\": \"c4806e2b-2e19-4e32-a7cd-8ead8b32350e\", \"title\": \"Movie Title\", \"imageurl\": \"/url/to/image\"}ProjectionsUna projecció és quan al “select” d’una consulta posem només un subconjunt de camps.Per a fer-ho amb un JpaRepository primer definirem en un interface quins són els camps que volem seleccionar:public interface ProjectionMovie { UUID getMovieid(); String getTitle(); Set&lt;ProjectionActor&gt; getActors();}Veiem que en lloc de definir els camps, hem de definir getters seguint l’estàndard JavaBeans.Després al Repository podem fer que les consultes retornin objectes conforme a aquests interfaces:public interface MovieRepository extends JpaRepository&lt;Movie, UUID&gt; { List&lt;ProjectionMovie&gt; findBy();}Açò funcionarà per a les consultes que JPA derivades del nom: Query MethodsRelacions@ManyToManyEn una relació ManyToMany entre dues entitats hem d’escollir primer una de les dos entitats com la “propietària” de la relació i l’altra com a “no-propietària”.A l’entitat “pripietària” definirem les anotacions @ManyToMany i @JoinTable:@Entity@Table(name = \"movie\")public class Movie { @Id @GeneratedValue(strategy = GenerationType.AUTO) public UUID movieid; public String title; public String imageurl; @ManyToMany @JoinTable(name = \"movie_actor\", joinColumns = @JoinColumn(name = \"movieid\"), inverseJoinColumns = @JoinColumn(name = \"actorid\")) public Set&lt;Actor&gt; actors; }A l’entitat “no-propietària” definirem l’anotació @ManyToMany fent referència al camp de l’entitat “propietària” que defineix la relació:@Entity@Table(name = \"actor\")public class Actor { @Id @GeneratedValue(strategy = GenerationType.AUTO) public UUID actorid; public String name; public String imageurl; @ManyToMany(mappedBy = \"actors\") public Set&lt;Movie&gt; movies; }Com la relació és bidireccional, quan la llibreria Jackson faci la serialització a JSON, es produeix una dependència circular (recursió infinita). Podem tallar aquesta recursió amb l’anotació @JsonIgnoreProperties:@Entity@Table(name = \"movie\")public class Movie { @Id @GeneratedValue(strategy = GenerationType.AUTO) public UUID movieid; public String title; public String imageurl; @ManyToMany @JoinTable(name = \"movie_actor\", joinColumns = @JoinColumn(name = \"movieid\"), inverseJoinColumns = @JoinColumn(name = \"actorid\")) @JsonIgnoreProperties(\"movies\") public Set&lt;Actor&gt; actors;}@Entity@Table(name = \"actor\")public class Actor { @Id @GeneratedValue(strategy = GenerationType.AUTO) public UUID actorid; public String name; public String imageurl; @ManyToMany(mappedBy = \"actors\") @JsonIgnoreProperties(\"actors\") public Set&lt;Movie&gt; movies;}Webgrafía: gerardfp.github.io" }, { "title": "Persistencia en ficheros", "url": "/documentacion/posts/persistencia-en-ficheros/", "categories": "Java, files", "tags": "java, persistencia, json, api, xml", "date": "2022-06-03 07:46:00 +0200", "snippet": "Persistència en fitxersPath operationsPaths , Path , FilesUn objecte de classe Path conté el nom de fitxer i la llista de directoris que s’utilitzen per construir el camí i s’utilitza per examinar,...", "content": "Persistència en fitxersPath operationsPaths , Path , FilesUn objecte de classe Path conté el nom de fitxer i la llista de directoris que s’utilitzen per construir el camí i s’utilitza per examinar, localitzar i manipular fitxers i directoris.Per a obtenir un objecte Path utilitza el mètode static Paths.get()Path path = Paths.get(\"/ruta/al/fitxer/o/directori\");Exemples// obtenir el nom d'un fitxer, i unir-lo a la ruta d'un altre directoriPath file = Paths.get(\"/usr/local/file.txt\");Path dir = Paths.get(\"/home/user\");System.out.println(dir.resolve(file.getFileName())); // /home/user/file.txt// relativitzar una ruta respecte a una altraPath file = Paths.get(\"/a/b/c/d.txt\");Path dir = Paths.get(\"/a/b/\");System.out.println(dir.relativize(file)); // c/d.txtLa classe Files conté mètodes estàtics per a fer operacions sobre fitxers i directoris// crear un directori i els seus parentsFiles.createDirectories(Paths.get(\"/some/non/existing/directories\"));// Imprimir el contingut d'un directoriFiles.list(Paths.get(\"/some/directory\")).forEach(System.out::println);// Obtenir la llista dels continguts niats d'un directoriList&lt;Path&gt; list = Files.walk(Paths.get(\"/this/directory\")).collect(Collectors.toList());// Imprimir els fitxers regulars d'un directori ordenats per tamanyFiles.list(Paths.get(\"/another/directori\")) .filter(Files::isRegularFile) .sorted(Comparator.comparingLong(path -&gt; { try { return Files.size(path); } catch (IOException e) { return 0; }})) .forEach(System.out::println);// Obtenir l'any, mes i dia de la data d'ultima modificacióPath file = Paths.get(\"/one/more/file\");LocalDateTime time = LocalDateTime.parse(Files.getLastModifiedTime(file).toString(), DateTimeFormatter.ISO_DATE_TIME);System.out.println(time.getYear());System.out.println(time.getMonthValue());System.out.println(time.getDayOfMonth());Exercici 1 - FlattenFes un programa que rebi com a argument la ruta d’un directori i “aplani” (flatten) el seu contingut, és a dir, que mogui a aquest mateix directori tots els fitxers que tingui niats. També haurà d’esborrar tots els directoris niats. Per exemple, si executem el programa amb aquest directori “niats”:hauria de quedar així:Utilitza aquestes comandes per a crear l’arbre de provarm -r /tmp/flatten; mkdir -p /tmp/flatten/aaa/bbb/../ccc/ddd/../../eee/../../fff; touch /tmp/flatten/aaa/a.txt /tmp/flatten/aaa/a2.txt /tmp/flatten/aaa/bbb/b.txt /tmp/flatten/aaa/ccc/c.txt /tmp/flatten/aaa/ccc/ddd/d.txt /tmp/flatten/aaa/eee/e.txt /tmp/flatten/fff/f.txt /tmp/flatten/n.txtExercici 2 - TreediffFes un programa que rebi com a arguments dos directoris (DirectoriA i DirectoriB). El programa haura de comparar els fitxers niats (nested) dels dos directoris i dir: Els fitxers que estan al DirectoriA i no estan al DirectoriB Els fitxers que estan al DirectoriB i no estan al DirectoriA Els fitxers que estan al DirectoriA i al DirectoriB, però en diferents rutes Els fitxers que estan al DirectoriA i al DirectoriB, a la mateixa ruta(quan diem que “està en una altra ruta” significa que o bé està en un altre directori (relatiu a DirectoriA o DirectoriB) o bé té un altre nom)Per a saber si dos fitxers son iguals caldrà fixar-se en el seu contingut. S’haurà de fer un hash del contingut de cada fitxer i comparar-los. Ho pots fer així:Path file1 = Paths.get(\"/aqui/esta/file1\");Path file2 = Paths.get(\"/alla/esta/file2\");byte[] hash1 = MessageDigest.getInstance(\"MD5\").digest(Files.readAllBytes(file1));byte[] hash2 = MessageDigest.getInstance(\"MD5\").digest(Files.readAllBytes(file2));if (Arrays.equals(hash1, hash2)) { // els fitxers file1 i files2 tenen el mateix contingut}Arbre de prova:rm -r /tmp/dirA; rm -r /tmp/dirB; mkdir -p /tmp/dirA/../dirB; echo \"hola\" &gt; /tmp/dirA/hola.txt; echo \"hola\" &gt; /tmp/dirB/hola.txt; echo \"adeu\" &gt; /tmp/dirA/adeu.txt; echo \"adeu\" &gt; /tmp/dirB/adeu2.txt; echo \"jaja\" &gt; /tmp/dirA/jaja.txt; echo \"jojo\" &gt; /tmp/dirB/jaja.txt; echo \"jiji\" &gt; /tmp/dirB/jiji.txt; mkdir /tmp/dirA/subdirA; mkdir /tmp/dirB/subdirA; echo \"damdamdam\" &gt; /tmp/dirA/subdirA/dam.txt; echo \"damdamdam\" &gt; /tmp/dirB/subdirA/dam.txt; echo \"madmadmad\" &gt; /tmp/dirA/subdirA/mad.txt; echo \"madmadmad\" &gt; /tmp/dirB/subdirA/nomad.txtExercici 3 - DateTreeFes un programa que rebi com a argument un directori i organitzi els seus fitxers niats en directoris segons l’any, mes i dia de la seva data de l’última modificació.Per exemple, si cridem al programa amb aquest directori:Hauria de quedar així:Arbre de prova:rm -r /tmp/directori; mkdir -p /tmp/directori/aaa/bbb/ccc/../../../ddd; touch -t 202001030000 /tmp/directori/aaa/a.txt; touch -t 202011190000 /tmp/directori/aaa/bbb/b.txt; touch -t 202001190000 /tmp/directori/aaa/bbb/ccc/c.txt; touch -t 202110270000 /tmp/directori/ddd/d.txt; touch -t 201911240000 /tmp/directori/e.txtOrientat a bytesOutputStream / InputStreamwrite()// escriure bytes a un fitxer OutputStream os = Files.newOutputStream(path); os.write(63); os.write(127); os.write(33);read()// llegir un byte d'un fitxerInputStream is = Files.newInputStream(path);int a = is.read();// llegir tots els bytes un a unInputStream is = Files.newInputStream(path);for (int a; (a = is.read()) != -1;){ System.out.println(a);}Exercici 4 - Split/JoinFes un programa que accepti com a argument la ruta d’un arxiu i nombre de parts. El programa dividirà (split) aquest arxiu en la quantitat de parts especificada. Els arxius amb les parts estaran a la mateixa ruta que l’arxiu original, però afegint al final l’extensió .part.$i (on $i és el número d’ordre de cada part).Exemple:Donats com a arguments la ruta /carpeta/foto.jpg que s’ha de dividir en 4 parts, el programa agafarà aquest arxiu:/carpeta/foto.jpg 1024 bytesi el dividirà en aquests 4 arxius:/carpeta/foto.jpg.part.0 256 bytes/carpeta/foto.jpg.part.1 256 bytes/carpeta/foto.jpg.part.2 256 bytes/carpeta/foto.jpg.part.3 256 bytesD’una altra banda el programa també permetrà fer la inversa, és a dir, ajuntar (join) les diverses parts d’un arxiu per a formar l’arxiu original. El programa acceptarà com a argument la ruta d’un arxiu i buscarà totes les parts amb aquesta ruta que tenen afegida l’extensió .part.$i ajuntant-les per a formar l’arxiu.Exemple:Donada com a argument la ruta /carpeta/foto.jpg, el programa agafarà les parts que hi hagi:/carpeta/foto.jpg.part.0 256 bytes/carpeta/foto.jpg.part.1 256 bytes/carpeta/foto.jpg.part.2 256 bytes/carpeta/foto.jpg.part.3 256 bytesi les ajuntarà en aquest arxiu:/carpeta/foto.jpg 1024 bytesOrientat a caractersUTF-8 First code point Last code point Byte 1 Byte 2 Byte 3 Byte 4     0000 0 007F 127 0xxxxxxx       0080 128 07FF 2047 110xxxxx 10xxxxxx     0800 2048 FFFF 65535 110xxxxx 10xxxxxx 10xxxxxx   10000 65536 10FFFF 1114111 110xxxxx 10xxxxxx 10xxxxxx 10xxxxxx BufferedWriter / BufferedReaderwrite(\"A\"), escriu el codepoint del caracter “A” codificat amb UTF-8.write(65), escriu el codepoint 65 codificat en UTF-8// Escriure caracterstry (BufferedWriter bw = Files.newBufferedWriter(Paths.get(\"string2.txt\"))){ bw.write(\"A\"); bw.write(8986); bw.write(\"Java\"); bw.write(new char[]{'T','M'});} catch (IOException e) { e.printStackTrace();}read()// llegir caracterstry (BufferedReader br = Files.newBufferedReader(Paths.get(\"file.txt\"))){ char a = (char) br.read();} catch (IOException e) { e.printStackTrace();}readLine()// llegir una líniatry (BufferedReader br = Files.newBufferedReader(Paths.get(\"file.txt\"))){ String l = br.readLine();} catch (IOException e) { e.printStackTrace();}Files.writeString / Files.write / Files.linesFiles.writeString()// escriure un stringtry { Files.writeString(Paths.get(\"string.txt\"), \"This is a string\");} catch (IOException e) { e.printStackTrace();}Files.write()// escriure cada String d'una List en una nova líniaList&lt;String&gt; lines = Arrays.asList(\"linea1\",\"linea2\", \"linea3\");try { Files.write(Paths.get(\"lines.txt\"), lines);} catch (IOException e) { e.printStackTrace();}Files.lines()// llegir varies linies en un Streamtry (Stream&lt;String&gt; lines = Files.lines(Paths.get(\"lines.txt\"))) { lines.forEach(System.out::println);}// --- alternativatry { Files.lines(Paths.get(\"lines.txt\")) .forEach(System.out::println);} catch (IOException e) { e.printStackTrace();}// recollir l'Stream en una Listtry { List&lt;String&gt; lines = Files.lines(Paths.get(\"lines.txt\")).collect(Collectors.toList()); for(String line : lines) { System.out.println(line); }} catch (IOException e) { e.printStackTrace();}Exercici 5 - TopFiveScoresFes un programa que accepti com a arguments el nom i la puntuació (score) d’un jugador. El programa emmagatzemarà en un fitxer els 5 scores més alts en ordre de major a menor. Així doncs, si l’score donat com a argument no està al top 5, no l’emmagatzemarà. En finalitzar l’operació, el programa mostrarà aquest Top Five per pantalla.Exemple:$ java top5 \"James Gosling\" 300** TOP 5 SCORE **James Gosling 300$ java top5 \"Anders Hejlsberg\" 500** TOP 5 SCORE **Anders Hejlsberg 500James Gosling 300$ java top5 \"Chris Lattner\" 400** TOP 5 SCORE **Anders Hejlsberg 500Chris Lattner 400James Gosling 300$ java top5 \"Brendan Eich\" 200** TOP 5 SCORE **Anders Hejlsberg 500Chris Lattner 400James Gosling 300Brendan Eich 200$ java top5 \"Bjarne Stroustrup\" 600** TOP 5 SCORE **Bjarne Stroustrup 600Anders Hejlsberg 500Chris Lattner 400James Gosling 300Brendan Eich 200$ java top5 \"Guido van Rossum\" 100** TOP 5 SCORE **Bjarne Stroustrup 600Anders Hejlsberg 500Chris Lattner 400James Gosling 300Brendan Eich 200JSON/XMLInstal·lar la llibreria FasterXML/Jacksonbuild.gradleplugins { id 'java'}sourceSets.main.java.srcDirs = [ \"src/\" ]repositories { mavenCentral()}dependencies { implementation 'com.fasterxml.jackson.core:jackson-databind:2.13.0'}JSON d'exemple{ \"nombre\": \"Juan\", \"ciclo\": { \"titulo\": \"DAM\", \"curso\": 2 }, \"modulos\": [ { \"codigo\": \"M6\", \"nota\": 9.8 }, { \"codigo\": \"M8\", \"nota\": 9.9 } ]}Mapping classes per al JSON d’exempleclass Estudiante { public String nombre; public CicloFormativo ciclo; public List&lt;Modulo&gt; modulos;}class CicloFormativo { public String titulo; public int curso;}class Modulo { public String codigo; public float nota;}JSON &lt;-&gt; StringreadValue(String, Class&lt;T&gt;)String jsonValue = \"{\\\"nombre\\\": \\\"Juan\\\", \\\"ciclo\\\": { \\\"titulo\\\": \\\"DAM\\\", \\\"curso\\\": 2 }, \\\"modulos\\\": [ { \\\"codigo\\\": \\\"M6\\\", \\\"nota\\\": 9.8 }, { \\\"codigo\\\": \\\"M8\\\", \\\"nota\\\": 9.9 } ] }\";ObjectMapper objectMapper = new ObjectMapper();Estudiante estudiante = objectMapper.readValue(jsonValue, Estudiante.class);System.out.println(estudiante.nombre);System.out.println(estudiante.ciclo.titulo + estudiante.ciclo.curso);System.out.println(estudiante.modulos.stream().map(m -&gt; m.codigo + \": \" + m.nota).collect(Collectors.joining(\"\\n\")));writeValueAsString(Object)Estudiante estudiante = new Estudiante();estudiante.nombre = \"Pepe\";estudiante.ciclo = new CicloFormativo();estudiante.ciclo.titulo = \"DAW\";estudiante.ciclo.curso = 1;estudiante.modulos = new ArrayList&lt;&gt;();estudiante.modulos.add(new Modulo());estudiante.modulos.add(new Modulo());estudiante.modulos.get(0).codigo = \"M2\";estudiante.modulos.get(0).nota = 7;estudiante.modulos.get(1).codigo = \"M3\";estudiante.modulos.get(1).nota = 8.2f;ObjectMapper objectMapper = new ObjectMapper();String jsonValue = objectMapper.writeValueAsString(estudiante);System.out.println(jsonValue);JSON &lt;-&gt; FilereadValue(File, Class&lt;T&gt;)Estudiante estudiante = objectMapper.readValue(Paths.get(\"file.json\").toFile(), Estudiante.class);System.out.println(estudiante.nombre);System.out.println(estudiante.ciclo.titulo + estudiante.ciclo.curso);System.out.println(estudiante.modulos.stream().map(m -&gt; m.codigo + \": \" + m.nota).collect(Collectors.joining(\"\\n\")));writeValue(File, Object)Estudiante estudiante = new Estudiante();estudiante.nombre = \"Juan\";// ...objectMapper.writeValue(Paths.get(\"file.json\").toFile(), estudiante);JSON &lt;-&gt; URLreadValue(URL, Class&lt;T&gt;)ObjectMapper objectMapper = new ObjectMapper();Estudiante estudiante = objectMapper.readValue(new URL(\"https://gist.githubusercontent.com/gerardfp/b6b72efb17404d46bfc0a13200166167/raw/4864017a335d66a24e6250faabaeef111ca1ebc7/estudiante.json\"), Estudiante.class);System.out.println(estudiante.nombre);System.out.println(estudiante.ciclo.titulo + estudiante.ciclo.curso);System.out.println(estudiante.modulos.stream().map(m -&gt; m.codigo + \": \" + m.nota).collect(Collectors.joining(\"\\n\")));Exercici 6 - AgendaCrea un programa que permeti emmagatzemar contactes a mode d’agenda. Les dades s’han d’emmagtzemar en un fitxer json.El programa es podrà executar amb les següents opcions: add myprogram add &lt;contact\\_name&gt; &lt;contact\\_phone&gt; &lt;contact\\_email&gt; Afegeix el contacte a l’agenda. Si el &lt;contact_name&gt; ja està a l’agenda, el sobreescriu. del myprogram del &lt;contact\\_name&gt; Elimina, si existeix, el contacte amb aquest &lt;contact_name&gt;. list myprogram list Llista tots els contactes que hi ha emmagatzemats. find myprogram find &lt;contact\\_email&gt; Llista els contactes que tenen aquest &lt;contact_email&gt;. Exercici 7 - LibraryGenera les classes necessàries per a emmagatzemar dades conformes amb aquest diagrama E/R. Crea objectes d’aquestes classes i emmagatzema’ls en un fitxer JSON.De quina forma modelaries les dades per obtenir les respostes a aquestes peticions? Llibres de cada autor (amb el gènere i el número de copies en cada biblioteca) Llibres de cada biblioteca (amb el gènere i l’autor). Biblioteques on trobem cada llibre (amb el gènere, l’autor i el número de còpies) Autors de cada gènere. Exercici 8 - OpenAPIEscull diverses APIs públiques i utilitza-les per a obtenir les seves dades. Hauràs de modelar almenys 6 respostes diferents.https://github.com/public-apis/public-apisWebgrafía: gerardfp.github.io" }, { "title": "Escribir un nuevo Post", "url": "/documentacion/posts/new-post/", "categories": "Tutorial, Demo", "tags": "template", "date": "2022-06-03 05:56:00 +0200", "snippet": "This post will guide you how to write a post on Chirpy theme. Even if you have previous experience with Jekyll, this article is worth reading, because many features require specific variables to be...", "content": "This post will guide you how to write a post on Chirpy theme. Even if you have previous experience with Jekyll, this article is worth reading, because many features require specific variables to be set.Naming and PathCreate a new file named YYYY-MM-DD-TITLE.EXTENSION and put it in the _posts of the root directory. Please note that the EXTENSION must be one of md and markdown. If you want to save time of creating files, please consider using the plugin Jekyll-Compose to accomplish this.Front MatterBasically, you need to fill the Front Matter as below at the top of the post:---title: TITLEdate: YYYY-MM-DD HH:MM:SS +/-TTTTcategories: [TOP_CATEGORIE, SUB_CATEGORIE]tags: [TAG] # TAG names should always be lowercase--- The posts’ layout has been set to post by default, so there is no need to add the variable layout in the Front Matter block.Timezone of DateIn order to accurately record the release date of a post, you should not only set up the timezone of _config.yml but also provide the post’s timezone in variable date of its Front Matter block. Format: +/-TTTT, e.g. +0800.Categories and TagsThe categories of each post are designed to contain up to two elements, and the number of elements in tags can be zero to infinity. For instance:---categories: [Animal, Insect]tags: [bee]---Author InformationThe author information of the post usually does not need to be filled in the Front Matter , they will be obtained from variables social.name and the first entry of social.links of the configuration file by default. But you can also override it as follows:Add author information in _data/authors.yml (If your website doesn’t have this file, don’t hesitate to create one.)&lt;author_id&gt;: name: &lt;full name&gt; twitter: &lt;twitter_of_author&gt; url: &lt;homepage_of_author&gt;And then set up the custom author in the post’s YAML block:---author: &lt;author_id&gt;--- Another benefit of reading the author information from the file _data/authors.yml is that the page will have the meta tag twitter:creator, which enriches the Twitter Cards and is good for SEO.Table of ContentsBy default, the Table of Contents (TOC) is displayed on the right panel of the post. If you want to turn it off globally, go to _config.yml and set the value of variable toc to false. If you want to turn off TOC for a specific post, add the following to the post’s Front Matter:---toc: false---CommentsThe global switch of comments is defined by variable comments.active in the file _config.yml. After selecting a comment system for this variable, comments will be turned on for all posts.If you want to close the comment for a specific post, add the following to the Front Matter of the post:---comments: false---MathematicsFor website performance reasons, the mathematical feature won’t be loaded by default. But it can be enabled by:---math: true---MermaidMermaid is a great diagrams generation tool. To enable it on your post, add the following to the YAML block:---mermaid: true---Then you can use it like other markdown languages: surround the graph code with ```mermaid and ```.ImagesCaptionAdd italics to the next line of an image，then it will become the caption and appear at the bottom of the image:![img-description](/path/to/image)_Image Caption_SizeIn order to prevent the page content layout from shifting when the image is loaded, we should set the width and height for each image:![Desktop View](/assets/img/sample/mockup.png){: width=\"700\" height=\"400\" }Starting from Chirpy v5.0.0, height and width support abbreviations (height → h, width → w). The following example has the same effect as the above:![Desktop View](/assets/img/sample/mockup.png){: w=\"700\" h=\"400\" }PositionBy default, the image is centered, but you can specify the position by using one of the classes normal, left, and right. Once the position is specified, the image caption should not be added. Normal position Image will be left aligned in below sample: ![Desktop View](/assets/img/sample/mockup.png){: .normal } Float to the left ![Desktop View](/assets/img/sample/mockup.png){: .left } Float to the right ![Desktop View](/assets/img/sample/mockup.png){: .right } ShadowThe screenshots of the program window can be considered to show the shadow effect, and the shadow will be visible in the light mode:![Desktop View](/assets/img/sample/mockup.png){: .shadow }CDN URLIf you host the images on the CDN, you can save the time of repeatedly writing the CDN URL by assigning the variable img_cdn of _config.yml file:img_cdn: https://cdn.comOnce img_cdn is assigned, the CDN URL will be added to the path of all images (images of site avatar and posts) starting with /.For instance, when using images:![The flower](/path/to/flower.png)The parsing result will automatically add the CDN prefix https://cdn.com before the image path:&lt;img src=\"https://cdn.com/path/to/flower.png\" alt=\"The flower\"&gt;Image PathWhen a post contains many images, it will be a time-consuming task to repeatedly define the path of the images. To solve this, we can define this path in the YAML block of the post:---img_path: /img/path/---And then, the image source of Markdown can write the file name directly:![The flower](flower.png)The output will be:&lt;img src=\"/img/path/flower.png\" alt=\"The flower\"&gt;Preview ImageIf you want to add an image to the top of the post contents, specify the attribute path, width, height, and alt for the image:---image: path: /path/to/image/file width: 1000 # in pixels height: 400 # in pixels alt: image alternative text---Except for alt, all other options are necessary, especially the width and height, which are related to user experience and web page loading performance. The above section “Size” also mentions this.Starting from Chirpy v5.0.0, the attributes height and width can be abbreviated: height → h, width → w. In addition, the img_path can also be passed to the preview image, that is, when it has been set, the attribute path only needs the image file name.Pinned PostsYou can pin one or more posts to the top of the home page, and the fixed posts are sorted in reverse order according to their release date. Enable by:---pin: true---PromptsThere are several types of prompts: tip, info, warning, and danger. They can be generated by adding the class prompt-{type} to the blockquote. For example, define a prompt of type info as follows:&gt; Example line for prompt.{: .prompt-info }SyntaxInline Code`inline code part`Filepath Hightlight`/path/to/a/file.extend`{: .filepath}Code BlockMarkdown symbols ``` can easily create a code block as follows:```This is a plaintext code snippet.```Specifying LanguageUsing ```{language} you will get a code block with syntax highlight:```yamlkey: value``` The Jekyll tag {% highlight %} is not compatible with this theme.Line NumberBy default, all languages except plaintext, console, and terminal will display line numbers. When you want to hide the line number of a code block, add the class nolineno to it:```shellecho 'No more line numbers!'```{: .nolineno }Specifying the FilenameYou may have noticed that the code language will be displayed at the top of the code block. If you want to replace it with the file name, you can add the attribute file to achieve this:```shell# content```{: file=\"path/to/file\" }Liquid CodesIf you want to display the Liquid snippet, surround the liquid code with {% raw %} and {% endraw %}:{% raw %}```liquid{% if product.title contains 'Pack' %} This product's title contains the word Pack.{% endif %}```{% endraw %}Or adding render_with_liquid: false (Requires Jekyll 4.0 or higher) to the post’s YAML block.Learn MoreFor more knowledge about Jekyll posts, visit the Jekyll Docs: Posts." }, { "title": "Syntax Template", "url": "/documentacion/posts/syntax-template/", "categories": "Tutorial, Demo", "tags": "template", "date": "2022-06-03 05:38:00 +0200", "snippet": "Este documento es un template de como escribir las cosas en otros documentos.TitlesH1 - headingH2 - headingH3 - headingH4 - headingParagraphI wandered lonely as a cloudThat floats on high o’er vale...", "content": "Este documento es un template de como escribir las cosas en otros documentos.TitlesH1 - headingH2 - headingH3 - headingH4 - headingParagraphI wandered lonely as a cloudThat floats on high o’er vales and hills,When all at once I saw a crowd,A host, of golden daffodils;Beside the lake, beneath the trees,Fluttering and dancing in the breeze.ListsOrdered list Firstly Secondly ThirdlyUnordered list Chapter Section Paragraph Task list TODO Completed Defeat COVID-19 Vaccine production Economic recovery People smile again Description list Sun the star around which the earth orbits Moon the natural satellite of the earth, visible by reflected light from the sunBlock Quote This line shows the block quote.Prompts An example showing the tip type prompt. An example showing the info type prompt. An example showing the warning type prompt. An example showing the danger type prompt.Tables Company Contact Country Alfreds Futterkiste Maria Anders Germany Island Trading Helen Bennett UK Magazzini Alimentari Riuniti Giovanni Rovelli Italy Linkshttp://mdoradom.github.io/documentacionFootnoteClick the hook will locate the footnote1, and here is another footnote2.Images Default (with caption)Full screen width and center alignment Shadowshadow effect (visible in light mode) Left aligned Float to left “A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space.” Float to right “A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space. A repetitive and meaningless text is used to fill the space.” Mermaid SVG gantt title Adding GANTT diagram functionality to mermaid apple :a, 2017-07-20, 1w banana :crit, b, 2017-07-23, 1d cherry :active, c, after b a, 1dMathematicsThe mathematics powered by MathJax:\\[\\sum_{n=1}^\\infty 1/n^2 = \\frac{\\pi^2}{6}\\]When $a \\ne 0$, there are two solutions to $ax^2 + bx + c = 0$ and they are\\[x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}\\]Inline codeThis is an example of Inline Code.FilepathHere is the /path/to/the/file.extend.Code blockCommonThis is a common code snippet, without syntax highlight and line number.Specific LanguagesConsole$ env |grep SHELLSHELL=/usr/local/bin/bashPYENV_SHELL=bashShellif [ $? -ne 0 ]; then echo \"The command was not successful.\"; #do the needful / exitfi;Specific filename@import \"colors/light-typography\", \"colors/dark-typography\"Reverse Footnote The footnote source &#8617; The 2nd footnote source &#8617; " } ]
